query GetAllEvents {
  events(orderBy: [CREATED_AT_DESC]) {
    nodes {
      ...MyEvent
      organization {
        id
        name
        slug
      }
      attendees {
        totalCount
      }
      eventBranding {
        ...EventBrandingFragment
      }
      registrations {
        totalCount
      }
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
  }
}
query GetAllEventsByOrganizationId($organizationId: UUID!) {
  events(
    orderBy: [CREATED_AT_DESC]
    condition: { organizationId: $organizationId }
  ) {
    nodes {
      ...MyEvent
    }
  }
}
query GetAllEventsByOrganizationSlug($organizationSlug: String!) {
  events(orderBy: [CREATED_AT_DESC], condition: { slug: $organizationSlug }) {
    nodes {
      ...MyEvent
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    totalCount
  }
}

query GetEventById(
  $eventId: UUID!
  $orderBy: [LogsOrderBy!] = UPDATED_AT_DESC
  # $attendeesOrderBy: [AttendeesOrderBy!] = LASTNAME_DESC
  $first: Int
  $offset: Int
  $filter: LogFilter
) {
  event(id: $eventId) {
    ...MyEvent
    eventBranding {
      ...EventBrandingFragment
    }
    capacity
    # registrations {
    #   nodes {
    #     attendeesList(orderBy: $attendeesOrderBy) {
    #       ...MyAttendee
    #     }
    #   }
    # }
    attendees {
      totalCount
      nodes {
        ...MyAttendee
      }
    }
    logsList(
      orderBy: $orderBy
      filter: $filter
      first: $first
      offset: $offset
    ) {
      id
      status
      payload
      updatedAt
    }
  }
}

query GetEventBySlug(
  $eventSlug: String!
  $organizationSlug: String! # $filter: AttendeeFilter # $first: Int # $offset: Int
) {
  eventBySlug(eventSlug: $eventSlug, organizationSlug: $organizationSlug) {
    ...MyEvent
    eventBranding {
      ...EventBrandingFragment
    }
    attendees {
      totalCount
      nodes {
        ...MyAttendee
      }
    }
    # registrations(first: $first, offset: $offset) {
    #   nodes {
    #     attendeesList(filter: $filter) {
    #       ...MyAttendee
    #     }
    #   }
    #   pageInfo {
    #     hasNextPage
    #     hasPreviousPage
    #     startCursor
    #     endCursor
    #   }
    #   totalCount
    # }
  }
}

query GetEventByEventSlug($eventSlug: String!) {
  events(condition: { slug: $eventSlug }) {
    edges {
      node {
        id

        capacity
        city
        description

        placeName
        slug
        name
        country
        bookingStartsAt
        bookingEndsAt
        zipCode
        startsAt
      }
    }
  }
}

query GetEventLogsBySlug(
  $eventSlug: String!
  $organizationSlug: String!
  $orderBy: [LogsOrderBy!] = UPDATED_AT_DESC
  $attendeesOrderBy: [AttendeesOrderBy!] = LASTNAME_DESC
  $first: Int
  $offset: Int
  $filter: LogFilter
) {
  eventBySlug(eventSlug: $eventSlug, organizationSlug: $organizationSlug) {
    ...MyEvent
    eventBranding {
      ...EventBrandingFragment
    }
    capacity
    registrations {
      nodes {
        attendeesList(orderBy: $attendeesOrderBy) {
          ...MyAttendee
        }
      }
    }
    logsList(
      orderBy: $orderBy
      filter: $filter
      first: $first
      offset: $offset
    ) {
      id
      status
      payload
      updatedAt
    }
  }
}
