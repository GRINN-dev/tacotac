"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Attendee`."""
  attendees(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attendee`."""
    orderBy: [AttendeesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttendeeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttendeeFilter
  ): AttendeesConnection

  """Reads and enables pagination through a set of `EventBranding`."""
  eventBrandings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EventBranding`."""
    orderBy: [EventBrandingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventBrandingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventBrandingFilter
  ): EventBrandingsConnection

  """Reads and enables pagination through a set of `Event`."""
  events(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter
  ): EventsConnection

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter
  ): OrganizationMembershipsConnection

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter
  ): OrganizationsConnection

  """Reads and enables pagination through a set of `Registration`."""
  registrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RegistrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RegistrationFilter
  ): RegistrationsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection
  attendee(id: UUID!): Attendee
  attendeeByEmailAndEventId(email: String!, eventId: UUID!): Attendee
  eventBranding(id: UUID!): EventBranding
  eventBrandingByEventId(eventId: UUID!): EventBranding
  event(id: UUID!): Event
  eventByOrganizationIdAndName(organizationId: UUID!, name: String!): Event
  eventByOrganizationIdAndSlug(organizationId: UUID!, slug: String!): Event
  organizationMembership(id: UUID!): OrganizationMembership
  organizationMembershipByOrganizationIdAndUserId(organizationId: UUID!, userId: UUID!): OrganizationMembership
  organization(id: UUID!): Organization
  organizationByName(name: String!): Organization
  organizationBySlug(slug: String!): Organization
  registration(id: UUID!): Registration
  user(id: UUID!): User
  userByEmail(email: String!): User

  """The currently logged in user (or null if not logged in)."""
  currentUser: User

  """Handy method to get the current user ID."""
  currentUserId: UUID
  dateTruncFunc(unit: String, date: Datetime): Datetime
  eventBySlug(eventSlug: String, organizationSlug: String): Event

  """Reads a single `Attendee` using its globally unique `ID`."""
  attendeeByNodeId(
    """The globally unique `ID` to be used in selecting a single `Attendee`."""
    nodeId: ID!
  ): Attendee

  """Reads a single `EventBranding` using its globally unique `ID`."""
  eventBrandingByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EventBranding`.
    """
    nodeId: ID!
  ): EventBranding

  """Reads a single `Event` using its globally unique `ID`."""
  eventByNodeId(
    """The globally unique `ID` to be used in selecting a single `Event`."""
    nodeId: ID!
  ): Event

  """
  Reads a single `OrganizationMembership` using its globally unique `ID`.
  """
  organizationMembershipByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OrganizationMembership`.
    """
    nodeId: ID!
  ): OrganizationMembership

  """Reads a single `Organization` using its globally unique `ID`."""
  organizationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Organization`.
    """
    nodeId: ID!
  ): Organization

  """Reads a single `Registration` using its globally unique `ID`."""
  registrationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Registration`.
    """
    nodeId: ID!
  ): Registration

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Attendee` values."""
type AttendeesConnection {
  """A list of `Attendee` objects."""
  nodes: [Attendee!]!

  """
  A list of edges which contains the `Attendee` and cursor to aid in pagination.
  """
  edges: [AttendeesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Attendee` you could get from the connection."""
  totalCount: Int!
}

type Attendee implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  firstname: String!
  lastname: String!
  email: String!
  eventId: UUID!
  registrationId: UUID
  status: EventStatus!
  notes: String
  isInscriptor: Boolean
  isVip: Boolean
  isFundraisingGenerosityOk: Boolean
  isNewsEventEmail: Boolean
  isNewsFondationEmail: Boolean
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Event` that is related to this `Attendee`."""
  event: Event

  """Reads a single `Registration` that is related to this `Attendee`."""
  registration: Registration
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

enum EventStatus {
  """En attente"""
  IDLE

  """Inscription annulée"""
  CANCELLED

  """Présence confirmée à l'évenement"""
  CONFIRMED

  """Ticket scanné"""
  TICKET_SCAN

  """Panneau scanné"""
  PANEL_SCAN
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Event implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  slug: String
  description: String!
  organizationId: UUID!
  placeName: String
  addressLine1: String
  addressLine2: String
  zipCode: String
  city: String
  country: String
  lat: Float
  lon: Float
  startsAt: Datetime
  endsAt: Datetime
  bookingStartsAt: Datetime
  bookingEndsAt: Datetime
  capacity: Int
  isVip: Boolean
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Organization` that is related to this `Event`."""
  organization: Organization

  """Reads and enables pagination through a set of `Registration`."""
  registrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RegistrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RegistrationFilter
  ): RegistrationsConnection!

  """Reads a single `EventBranding` that is related to this `Event`."""
  eventBranding: EventBranding

  """Reads and enables pagination through a set of `Attendee`."""
  attendees(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attendee`."""
    orderBy: [AttendeesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttendeeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttendeeFilter
  ): AttendeesConnection!
}

"""A company, organization, or institution."""
type Organization implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  name: String!
  slug: String
  description: String!

  """The URL of the organization's logo."""
  logoUrl: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter
  ): OrganizationMembershipsConnection!

  """Reads and enables pagination through a set of `Event`."""
  events(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter
  ): EventsConnection!
}

"""A connection to a list of `OrganizationMembership` values."""
type OrganizationMembershipsConnection {
  """A list of `OrganizationMembership` objects."""
  nodes: [OrganizationMembership!]!

  """
  A list of edges which contains the `OrganizationMembership` and cursor to aid in pagination.
  """
  edges: [OrganizationMembershipsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationMembership` you could get from the connection.
  """
  totalCount: Int!
}

type OrganizationMembership implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  organizationId: UUID!
  userId: UUID!
  role: OrganizationMembershipsRolesEnum!
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
}

enum OrganizationMembershipsRolesEnum {
  """Owner of the organization"""
  OWNER

  """Admin of the organization"""
  ADMIN

  """Member of the organization"""
  DEVELOPER

  """Manager of the organization"""
  MANAGER

  """Client of the organization"""
  CLIENT

  """Guest of the organization"""
  GUEST
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  firstname: String!
  lastname: String!
  avatarUrl: String
  isAdmin: Boolean!
  email: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter
  ): OrganizationMembershipsConnection!
  hasPassword: Boolean
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `OrganizationMembership`."""
enum OrganizationMembershipsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  ROLE_ASC
  ROLE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `OrganizationMembership` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OrganizationMembershipCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `role` field."""
  role: OrganizationMembershipsRolesEnum

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationMembershipFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter

  """Filter by the object’s `role` field."""
  role: OrganizationMembershipsRolesEnumFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [OrganizationMembershipFilter!]

  """Checks for any expressions in this list."""
  or: [OrganizationMembershipFilter!]

  """Negates the expression."""
  not: OrganizationMembershipFilter
}

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}

"""
A filter to be used against OrganizationMembershipsRolesEnum fields. All fields are combined with a logical ‘and.’
"""
input OrganizationMembershipsRolesEnumFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: OrganizationMembershipsRolesEnum

  """Not equal to the specified value."""
  notEqualTo: OrganizationMembershipsRolesEnum

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: OrganizationMembershipsRolesEnum

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: OrganizationMembershipsRolesEnum

  """Included in the specified list."""
  in: [OrganizationMembershipsRolesEnum!]

  """Not included in the specified list."""
  notIn: [OrganizationMembershipsRolesEnum!]

  """Less than the specified value."""
  lessThan: OrganizationMembershipsRolesEnum

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: OrganizationMembershipsRolesEnum

  """Greater than the specified value."""
  greaterThan: OrganizationMembershipsRolesEnum

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: OrganizationMembershipsRolesEnum
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""A `OrganizationMembership` edge in the connection."""
type OrganizationMembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationMembership` at the end of the edge."""
  node: OrganizationMembership!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""A connection to a list of `Event` values."""
type EventsConnection {
  """A list of `Event` objects."""
  nodes: [Event!]!

  """
  A list of edges which contains the `Event` and cursor to aid in pagination.
  """
  edges: [EventsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Event` you could get from the connection."""
  totalCount: Int!
}

"""A `Event` edge in the connection."""
type EventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Event` at the end of the edge."""
  node: Event!
}

"""Methods to use when ordering `Event`."""
enum EventsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  SLUG_ASC
  SLUG_DESC
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  CITY_ASC
  CITY_DESC
  STARTS_AT_ASC
  STARTS_AT_DESC
  ENDS_AT_ASC
  ENDS_AT_DESC
  BOOKING_STARTS_AT_ASC
  BOOKING_STARTS_AT_DESC
  BOOKING_ENDS_AT_ASC
  BOOKING_ENDS_AT_DESC
  CAPACITY_ASC
  CAPACITY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Event` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EventCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `startsAt` field."""
  startsAt: Datetime

  """Checks for equality with the object’s `endsAt` field."""
  endsAt: Datetime

  """Checks for equality with the object’s `bookingStartsAt` field."""
  bookingStartsAt: Datetime

  """Checks for equality with the object’s `bookingEndsAt` field."""
  bookingEndsAt: Datetime

  """Checks for equality with the object’s `capacity` field."""
  capacity: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Event` object types. All fields are combined with a logical ‘and.’
"""
input EventFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `city` field."""
  city: StringFilter

  """Filter by the object’s `startsAt` field."""
  startsAt: DatetimeFilter

  """Filter by the object’s `endsAt` field."""
  endsAt: DatetimeFilter

  """Filter by the object’s `bookingStartsAt` field."""
  bookingStartsAt: DatetimeFilter

  """Filter by the object’s `bookingEndsAt` field."""
  bookingEndsAt: DatetimeFilter

  """Filter by the object’s `capacity` field."""
  capacity: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [EventFilter!]

  """Checks for any expressions in this list."""
  or: [EventFilter!]

  """Negates the expression."""
  not: EventFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""A connection to a list of `Registration` values."""
type RegistrationsConnection {
  """A list of `Registration` objects."""
  nodes: [Registration!]!

  """
  A list of edges which contains the `Registration` and cursor to aid in pagination.
  """
  edges: [RegistrationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Registration` you could get from the connection."""
  totalCount: Int!
}

type Registration implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  codeId: UUID
  eventId: UUID
  hearAboutList: [String]
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Event` that is related to this `Registration`."""
  event: Event

  """Reads and enables pagination through a set of `Attendee`."""
  attendees(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attendee`."""
    orderBy: [AttendeesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttendeeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttendeeFilter
  ): AttendeesConnection!
}

"""Methods to use when ordering `Attendee`."""
enum AttendeesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  REGISTRATION_ID_ASC
  REGISTRATION_ID_DESC
  STATUS_ASC
  STATUS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Attendee` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttendeeCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `eventId` field."""
  eventId: UUID

  """Checks for equality with the object’s `registrationId` field."""
  registrationId: UUID

  """Checks for equality with the object’s `status` field."""
  status: EventStatus

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Attendee` object types. All fields are combined with a logical ‘and.’
"""
input AttendeeFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `eventId` field."""
  eventId: UUIDFilter

  """Filter by the object’s `registrationId` field."""
  registrationId: UUIDFilter

  """Filter by the object’s `status` field."""
  status: EventStatusFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [AttendeeFilter!]

  """Checks for any expressions in this list."""
  or: [AttendeeFilter!]

  """Negates the expression."""
  not: AttendeeFilter
}

"""
A filter to be used against EventStatus fields. All fields are combined with a logical ‘and.’
"""
input EventStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: EventStatus

  """Not equal to the specified value."""
  notEqualTo: EventStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: EventStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: EventStatus

  """Included in the specified list."""
  in: [EventStatus!]

  """Not included in the specified list."""
  notIn: [EventStatus!]

  """Less than the specified value."""
  lessThan: EventStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: EventStatus

  """Greater than the specified value."""
  greaterThan: EventStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: EventStatus
}

"""A `Registration` edge in the connection."""
type RegistrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Registration` at the end of the edge."""
  node: Registration!
}

"""Methods to use when ordering `Registration`."""
enum RegistrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Registration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RegistrationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `eventId` field."""
  eventId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Registration` object types. All fields are combined with a logical ‘and.’
"""
input RegistrationFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `eventId` field."""
  eventId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [RegistrationFilter!]

  """Checks for any expressions in this list."""
  or: [RegistrationFilter!]

  """Negates the expression."""
  not: RegistrationFilter
}

type EventBranding implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  eventId: UUID!
  color1: String
  color2: String
  font: Fonts
  logo: String
  placeholder: JSON
  richText: String
  shortText: String
  awardWinningAssoList: [String]
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `Event` that is related to this `EventBranding`."""
  event: Event
}

enum Fonts {
  """Roboto"""
  ROBOTO

  """Montserrat"""
  MONTSERRAT

  """Open Sans"""
  OPENSANS
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""A `Attendee` edge in the connection."""
type AttendeesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Attendee` at the end of the edge."""
  node: Attendee!
}

"""A connection to a list of `EventBranding` values."""
type EventBrandingsConnection {
  """A list of `EventBranding` objects."""
  nodes: [EventBranding!]!

  """
  A list of edges which contains the `EventBranding` and cursor to aid in pagination.
  """
  edges: [EventBrandingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventBranding` you could get from the connection."""
  totalCount: Int!
}

"""A `EventBranding` edge in the connection."""
type EventBrandingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventBranding` at the end of the edge."""
  node: EventBranding!
}

"""Methods to use when ordering `EventBranding`."""
enum EventBrandingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EventBranding` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventBrandingCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `eventId` field."""
  eventId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `EventBranding` object types. All fields are combined with a logical ‘and.’
"""
input EventBrandingFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `eventId` field."""
  eventId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [EventBrandingFilter!]

  """Checks for any expressions in this list."""
  or: [EventBrandingFilter!]

  """Negates the expression."""
  not: EventBrandingFilter
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """A list of `Organization` objects."""
  nodes: [Organization!]!

  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization!
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  SLUG_ASC
  SLUG_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Organization` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [OrganizationFilter!]

  """Checks for any expressions in this list."""
  or: [OrganizationFilter!]

  """Negates the expression."""
  not: OrganizationFilter
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User!]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `hasPassword` field."""
  hasPassword: BooleanFilter

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Negates the expression."""
  not: UserFilter
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Attendee`."""
  createAttendee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttendeeInput!
  ): CreateAttendeePayload

  """Creates a single `EventBranding`."""
  createEventBranding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventBrandingInput!
  ): CreateEventBrandingPayload

  """Creates a single `Event`."""
  createEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventInput!
  ): CreateEventPayload

  """Creates a single `OrganizationMembership`."""
  createOrganizationMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationMembershipInput!
  ): CreateOrganizationMembershipPayload

  """Creates a single `Organization`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single `Registration`."""
  createRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRegistrationInput!
  ): CreateRegistrationPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Updates a single `Attendee` using its globally unique id and a patch."""
  updateAttendeeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttendeeByNodeIdInput!
  ): UpdateAttendeePayload

  """Updates a single `Attendee` using a unique key and a patch."""
  updateAttendee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttendeeInput!
  ): UpdateAttendeePayload

  """Updates a single `Attendee` using a unique key and a patch."""
  updateAttendeeByEmailAndEventId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttendeeByEmailAndEventIdInput!
  ): UpdateAttendeePayload

  """
  Updates a single `EventBranding` using its globally unique id and a patch.
  """
  updateEventBrandingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventBrandingByNodeIdInput!
  ): UpdateEventBrandingPayload

  """Updates a single `EventBranding` using a unique key and a patch."""
  updateEventBranding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventBrandingInput!
  ): UpdateEventBrandingPayload

  """Updates a single `EventBranding` using a unique key and a patch."""
  updateEventBrandingByEventId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventBrandingByEventIdInput!
  ): UpdateEventBrandingPayload

  """Updates a single `Event` using its globally unique id and a patch."""
  updateEventByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventByNodeIdInput!
  ): UpdateEventPayload

  """Updates a single `Event` using a unique key and a patch."""
  updateEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventInput!
  ): UpdateEventPayload

  """Updates a single `Event` using a unique key and a patch."""
  updateEventByOrganizationIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventByOrganizationIdAndNameInput!
  ): UpdateEventPayload

  """Updates a single `Event` using a unique key and a patch."""
  updateEventByOrganizationIdAndSlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventByOrganizationIdAndSlugInput!
  ): UpdateEventPayload

  """
  Updates a single `OrganizationMembership` using its globally unique id and a patch.
  """
  updateOrganizationMembershipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationMembershipByNodeIdInput!
  ): UpdateOrganizationMembershipPayload

  """
  Updates a single `OrganizationMembership` using a unique key and a patch.
  """
  updateOrganizationMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationMembershipInput!
  ): UpdateOrganizationMembershipPayload

  """
  Updates a single `OrganizationMembership` using a unique key and a patch.
  """
  updateOrganizationMembershipByOrganizationIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationMembershipByOrganizationIdAndUserIdInput!
  ): UpdateOrganizationMembershipPayload

  """
  Updates a single `Organization` using its globally unique id and a patch.
  """
  updateOrganizationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByNodeIdInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganizationByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByNameInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganizationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationBySlugInput!
  ): UpdateOrganizationPayload

  """
  Updates a single `Registration` using its globally unique id and a patch.
  """
  updateRegistrationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRegistrationByNodeIdInput!
  ): UpdateRegistrationPayload

  """Updates a single `Registration` using a unique key and a patch."""
  updateRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRegistrationInput!
  ): UpdateRegistrationPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEmailInput!
  ): UpdateUserPayload

  """Deletes a single `Attendee` using its globally unique id."""
  deleteAttendeeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttendeeByNodeIdInput!
  ): DeleteAttendeePayload

  """Deletes a single `Attendee` using a unique key."""
  deleteAttendee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttendeeInput!
  ): DeleteAttendeePayload

  """Deletes a single `Attendee` using a unique key."""
  deleteAttendeeByEmailAndEventId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttendeeByEmailAndEventIdInput!
  ): DeleteAttendeePayload

  """Deletes a single `EventBranding` using its globally unique id."""
  deleteEventBrandingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventBrandingByNodeIdInput!
  ): DeleteEventBrandingPayload

  """Deletes a single `EventBranding` using a unique key."""
  deleteEventBranding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventBrandingInput!
  ): DeleteEventBrandingPayload

  """Deletes a single `EventBranding` using a unique key."""
  deleteEventBrandingByEventId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventBrandingByEventIdInput!
  ): DeleteEventBrandingPayload

  """Deletes a single `Event` using its globally unique id."""
  deleteEventByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventByNodeIdInput!
  ): DeleteEventPayload

  """Deletes a single `Event` using a unique key."""
  deleteEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventInput!
  ): DeleteEventPayload

  """Deletes a single `Event` using a unique key."""
  deleteEventByOrganizationIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventByOrganizationIdAndNameInput!
  ): DeleteEventPayload

  """Deletes a single `Event` using a unique key."""
  deleteEventByOrganizationIdAndSlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventByOrganizationIdAndSlugInput!
  ): DeleteEventPayload

  """
  Deletes a single `OrganizationMembership` using its globally unique id.
  """
  deleteOrganizationMembershipByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationMembershipByNodeIdInput!
  ): DeleteOrganizationMembershipPayload

  """Deletes a single `OrganizationMembership` using a unique key."""
  deleteOrganizationMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationMembershipInput!
  ): DeleteOrganizationMembershipPayload

  """Deletes a single `OrganizationMembership` using a unique key."""
  deleteOrganizationMembershipByOrganizationIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationMembershipByOrganizationIdAndUserIdInput!
  ): DeleteOrganizationMembershipPayload

  """Deletes a single `Organization` using its globally unique id."""
  deleteOrganizationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByNodeIdInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganizationByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByNameInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganizationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationBySlugInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Registration` using its globally unique id."""
  deleteRegistrationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRegistrationByNodeIdInput!
  ): DeleteRegistrationPayload

  """Deletes a single `Registration` using a unique key."""
  deleteRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRegistrationInput!
  ): DeleteRegistrationPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEmailInput!
  ): DeleteUserPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload
  generatePresignedPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GeneratePresignedPostInput!
  ): GeneratePresignedPostPayload
  deleteFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileInput!
  ): DeleteFilePayload
}

"""The output of our create `Attendee` mutation."""
type CreateAttendeePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attendee` that was created by this mutation."""
  attendee: Attendee

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `Attendee`."""
  event: Event

  """Reads a single `Registration` that is related to this `Attendee`."""
  registration: Registration

  """An edge for our `Attendee`. May be used by Relay 1."""
  attendeeEdge(
    """The method to use when ordering `Attendee`."""
    orderBy: [AttendeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeesEdge
}

"""All input for the create `Attendee` mutation."""
input CreateAttendeeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Attendee` to be created by this mutation."""
  attendee: AttendeeInput!
}

"""An input for mutations affecting `Attendee`"""
input AttendeeInput {
  id: UUID
  firstname: String!
  lastname: String!
  email: String!
  eventId: UUID!
  registrationId: UUID
  status: EventStatus!
  notes: String
  isInscriptor: Boolean
  isVip: Boolean
  isFundraisingGenerosityOk: Boolean
  isNewsEventEmail: Boolean
  isNewsFondationEmail: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `EventBranding` mutation."""
type CreateEventBrandingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventBranding` that was created by this mutation."""
  eventBranding: EventBranding

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `EventBranding`."""
  event: Event

  """An edge for our `EventBranding`. May be used by Relay 1."""
  eventBrandingEdge(
    """The method to use when ordering `EventBranding`."""
    orderBy: [EventBrandingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventBrandingsEdge
}

"""All input for the create `EventBranding` mutation."""
input CreateEventBrandingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EventBranding` to be created by this mutation."""
  eventBranding: EventBrandingInput!
}

"""An input for mutations affecting `EventBranding`"""
input EventBrandingInput {
  id: UUID
  eventId: UUID!
  color1: String
  color2: String
  font: Fonts
  logo: String
  placeholder: JSON
  richText: String
  shortText: String
  awardWinningAssoList: [String]
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `Event` mutation."""
type CreateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was created by this mutation."""
  event: Event

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organization` that is related to this `Event`."""
  organization: Organization

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge
}

"""All input for the create `Event` mutation."""
input CreateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Event` to be created by this mutation."""
  event: EventInput!
}

"""An input for mutations affecting `Event`"""
input EventInput {
  id: UUID
  name: String!
  slug: String
  description: String!
  organizationId: UUID!
  placeName: String
  addressLine1: String
  addressLine2: String
  zipCode: String
  city: String
  country: String
  lat: Float
  lon: Float
  startsAt: Datetime
  endsAt: Datetime
  bookingStartsAt: Datetime
  bookingEndsAt: Datetime
  capacity: Int
  isVip: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `OrganizationMembership` mutation."""
type CreateOrganizationMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganizationMembership` that was created by this mutation."""
  organizationMembership: OrganizationMembership

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User

  """An edge for our `OrganizationMembership`. May be used by Relay 1."""
  organizationMembershipEdge(
    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsEdge
}

"""All input for the create `OrganizationMembership` mutation."""
input CreateOrganizationMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OrganizationMembership` to be created by this mutation."""
  organizationMembership: OrganizationMembershipInput!
}

"""An input for mutations affecting `OrganizationMembership`"""
input OrganizationMembershipInput {
  id: UUID
  organizationId: UUID!
  userId: UUID!
  role: OrganizationMembershipsRolesEnum
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `Organization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was created by this mutation."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the create `Organization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Organization` to be created by this mutation."""
  organization: OrganizationInput!
}

"""An input for mutations affecting `Organization`"""
input OrganizationInput {
  id: UUID
  name: String!
  slug: String
  description: String!

  """The URL of the organization's logo."""
  logoUrl: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `Registration` mutation."""
type CreateRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Registration` that was created by this mutation."""
  registration: Registration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `Registration`."""
  event: Event

  """An edge for our `Registration`. May be used by Relay 1."""
  registrationEdge(
    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsEdge
}

"""All input for the create `Registration` mutation."""
input CreateRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Registration` to be created by this mutation."""
  registration: RegistrationInput!
}

"""An input for mutations affecting `Registration`"""
input RegistrationInput {
  id: UUID
  codeId: UUID
  eventId: UUID
  hearAboutList: [String]
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: UUID
  firstname: String!
  lastname: String!
  avatarUrl: String
  isAdmin: Boolean
  email: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our update `Attendee` mutation."""
type UpdateAttendeePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attendee` that was updated by this mutation."""
  attendee: Attendee

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `Attendee`."""
  event: Event

  """Reads a single `Registration` that is related to this `Attendee`."""
  registration: Registration

  """An edge for our `Attendee`. May be used by Relay 1."""
  attendeeEdge(
    """The method to use when ordering `Attendee`."""
    orderBy: [AttendeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeesEdge
}

"""All input for the `updateAttendeeByNodeId` mutation."""
input UpdateAttendeeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attendee` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Attendee` being updated.
  """
  patch: AttendeePatch!
}

"""
Represents an update to a `Attendee`. Fields that are set will be updated.
"""
input AttendeePatch {
  id: UUID
  firstname: String
  lastname: String
  email: String
  eventId: UUID
  registrationId: UUID
  status: EventStatus
  notes: String
  isInscriptor: Boolean
  isVip: Boolean
  isFundraisingGenerosityOk: Boolean
  isNewsEventEmail: Boolean
  isNewsFondationEmail: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateAttendee` mutation."""
input UpdateAttendeeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Attendee` being updated.
  """
  patch: AttendeePatch!
  id: UUID!
}

"""All input for the `updateAttendeeByEmailAndEventId` mutation."""
input UpdateAttendeeByEmailAndEventIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Attendee` being updated.
  """
  patch: AttendeePatch!
  email: String!
  eventId: UUID!
}

"""The output of our update `EventBranding` mutation."""
type UpdateEventBrandingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventBranding` that was updated by this mutation."""
  eventBranding: EventBranding

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `EventBranding`."""
  event: Event

  """An edge for our `EventBranding`. May be used by Relay 1."""
  eventBrandingEdge(
    """The method to use when ordering `EventBranding`."""
    orderBy: [EventBrandingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventBrandingsEdge
}

"""All input for the `updateEventBrandingByNodeId` mutation."""
input UpdateEventBrandingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EventBranding` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EventBranding` being updated.
  """
  patch: EventBrandingPatch!
}

"""
Represents an update to a `EventBranding`. Fields that are set will be updated.
"""
input EventBrandingPatch {
  id: UUID
  eventId: UUID
  color1: String
  color2: String
  font: Fonts
  logo: String
  placeholder: JSON
  richText: String
  shortText: String
  awardWinningAssoList: [String]
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateEventBranding` mutation."""
input UpdateEventBrandingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EventBranding` being updated.
  """
  patch: EventBrandingPatch!
  id: UUID!
}

"""All input for the `updateEventBrandingByEventId` mutation."""
input UpdateEventBrandingByEventIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EventBranding` being updated.
  """
  patch: EventBrandingPatch!
  eventId: UUID!
}

"""The output of our update `Event` mutation."""
type UpdateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was updated by this mutation."""
  event: Event

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organization` that is related to this `Event`."""
  organization: Organization

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge
}

"""All input for the `updateEventByNodeId` mutation."""
input UpdateEventByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Event` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Event` being updated.
  """
  patch: EventPatch!
}

"""
Represents an update to a `Event`. Fields that are set will be updated.
"""
input EventPatch {
  id: UUID
  name: String
  slug: String
  description: String
  organizationId: UUID
  placeName: String
  addressLine1: String
  addressLine2: String
  zipCode: String
  city: String
  country: String
  lat: Float
  lon: Float
  startsAt: Datetime
  endsAt: Datetime
  bookingStartsAt: Datetime
  bookingEndsAt: Datetime
  capacity: Int
  isVip: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateEvent` mutation."""
input UpdateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Event` being updated.
  """
  patch: EventPatch!
  id: UUID!
}

"""All input for the `updateEventByOrganizationIdAndName` mutation."""
input UpdateEventByOrganizationIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Event` being updated.
  """
  patch: EventPatch!
  organizationId: UUID!
  name: String!
}

"""All input for the `updateEventByOrganizationIdAndSlug` mutation."""
input UpdateEventByOrganizationIdAndSlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Event` being updated.
  """
  patch: EventPatch!
  organizationId: UUID!
  slug: String!
}

"""The output of our update `OrganizationMembership` mutation."""
type UpdateOrganizationMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganizationMembership` that was updated by this mutation."""
  organizationMembership: OrganizationMembership

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User

  """An edge for our `OrganizationMembership`. May be used by Relay 1."""
  organizationMembershipEdge(
    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsEdge
}

"""All input for the `updateOrganizationMembershipByNodeId` mutation."""
input UpdateOrganizationMembershipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganizationMembership` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OrganizationMembership` being updated.
  """
  patch: OrganizationMembershipPatch!
}

"""
Represents an update to a `OrganizationMembership`. Fields that are set will be updated.
"""
input OrganizationMembershipPatch {
  id: UUID
  organizationId: UUID
  userId: UUID
  role: OrganizationMembershipsRolesEnum
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateOrganizationMembership` mutation."""
input UpdateOrganizationMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OrganizationMembership` being updated.
  """
  patch: OrganizationMembershipPatch!
  id: UUID!
}

"""
All input for the `updateOrganizationMembershipByOrganizationIdAndUserId` mutation.
"""
input UpdateOrganizationMembershipByOrganizationIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OrganizationMembership` being updated.
  """
  patch: OrganizationMembershipPatch!
  organizationId: UUID!
  userId: UUID!
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `updateOrganizationByNodeId` mutation."""
input UpdateOrganizationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  id: UUID
  name: String
  slug: String
  description: String

  """The URL of the organization's logo."""
  logoUrl: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateOrganization` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
  id: UUID!
}

"""All input for the `updateOrganizationByName` mutation."""
input UpdateOrganizationByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
  name: String!
}

"""All input for the `updateOrganizationBySlug` mutation."""
input UpdateOrganizationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
  slug: String!
}

"""The output of our update `Registration` mutation."""
type UpdateRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Registration` that was updated by this mutation."""
  registration: Registration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `Registration`."""
  event: Event

  """An edge for our `Registration`. May be used by Relay 1."""
  registrationEdge(
    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsEdge
}

"""All input for the `updateRegistrationByNodeId` mutation."""
input UpdateRegistrationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Registration` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Registration` being updated.
  """
  patch: RegistrationPatch!
}

"""
Represents an update to a `Registration`. Fields that are set will be updated.
"""
input RegistrationPatch {
  id: UUID
  codeId: UUID
  eventId: UUID
  hearAboutList: [String]
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateRegistration` mutation."""
input UpdateRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Registration` being updated.
  """
  patch: RegistrationPatch!
  id: UUID!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: UUID
  firstname: String
  lastname: String
  avatarUrl: String
  isAdmin: Boolean
  email: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  id: UUID!
}

"""All input for the `updateUserByEmail` mutation."""
input UpdateUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  email: String!
}

"""The output of our delete `Attendee` mutation."""
type DeleteAttendeePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attendee` that was deleted by this mutation."""
  attendee: Attendee
  deletedAttendeeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `Attendee`."""
  event: Event

  """Reads a single `Registration` that is related to this `Attendee`."""
  registration: Registration

  """An edge for our `Attendee`. May be used by Relay 1."""
  attendeeEdge(
    """The method to use when ordering `Attendee`."""
    orderBy: [AttendeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeesEdge
}

"""All input for the `deleteAttendeeByNodeId` mutation."""
input DeleteAttendeeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attendee` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAttendee` mutation."""
input DeleteAttendeeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteAttendeeByEmailAndEventId` mutation."""
input DeleteAttendeeByEmailAndEventIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  eventId: UUID!
}

"""The output of our delete `EventBranding` mutation."""
type DeleteEventBrandingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventBranding` that was deleted by this mutation."""
  eventBranding: EventBranding
  deletedEventBrandingNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `EventBranding`."""
  event: Event

  """An edge for our `EventBranding`. May be used by Relay 1."""
  eventBrandingEdge(
    """The method to use when ordering `EventBranding`."""
    orderBy: [EventBrandingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventBrandingsEdge
}

"""All input for the `deleteEventBrandingByNodeId` mutation."""
input DeleteEventBrandingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EventBranding` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteEventBranding` mutation."""
input DeleteEventBrandingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteEventBrandingByEventId` mutation."""
input DeleteEventBrandingByEventIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventId: UUID!
}

"""The output of our delete `Event` mutation."""
type DeleteEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was deleted by this mutation."""
  event: Event
  deletedEventNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Organization` that is related to this `Event`."""
  organization: Organization

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge
}

"""All input for the `deleteEventByNodeId` mutation."""
input DeleteEventByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Event` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteEvent` mutation."""
input DeleteEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteEventByOrganizationIdAndName` mutation."""
input DeleteEventByOrganizationIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  name: String!
}

"""All input for the `deleteEventByOrganizationIdAndSlug` mutation."""
input DeleteEventByOrganizationIdAndSlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  slug: String!
}

"""The output of our delete `OrganizationMembership` mutation."""
type DeleteOrganizationMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrganizationMembership` that was deleted by this mutation."""
  organizationMembership: OrganizationMembership
  deletedOrganizationMembershipNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User

  """An edge for our `OrganizationMembership`. May be used by Relay 1."""
  organizationMembershipEdge(
    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsEdge
}

"""All input for the `deleteOrganizationMembershipByNodeId` mutation."""
input DeleteOrganizationMembershipByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrganizationMembership` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOrganizationMembership` mutation."""
input DeleteOrganizationMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteOrganizationMembershipByOrganizationIdAndUserId` mutation.
"""
input DeleteOrganizationMembershipByOrganizationIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our delete `Organization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was deleted by this mutation."""
  organization: Organization
  deletedOrganizationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge
}

"""All input for the `deleteOrganizationByNodeId` mutation."""
input DeleteOrganizationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOrganization` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteOrganizationByName` mutation."""
input DeleteOrganizationByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteOrganizationBySlug` mutation."""
input DeleteOrganizationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String!
}

"""The output of our delete `Registration` mutation."""
type DeleteRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Registration` that was deleted by this mutation."""
  registration: Registration
  deletedRegistrationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `Registration`."""
  event: Event

  """An edge for our `Registration`. May be used by Relay 1."""
  registrationEdge(
    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsEdge
}

"""All input for the `deleteRegistrationByNodeId` mutation."""
input DeleteRegistrationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Registration` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRegistration` mutation."""
input DeleteRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteUserByEmail` mutation."""
input DeleteUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `login` mutation."""
type LoginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwt: Jwt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar Jwt

"""All input for the `login` mutation."""
input LoginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  password: String
}

"""The output of our `register` mutation."""
type RegisterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwt: Jwt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `register` mutation."""
input RegisterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  firstname: String
  lastname: String
  password: String
  avatarUrl: String
}

type GeneratePresignedPostPayload {
  url: String
  fields: JSON
}

input GeneratePresignedPostInput {
  key: String!
}

type DeleteFilePayload {
  success: Boolean
}

input DeleteFileInput {
  key: String!
}
