"""All input for the `acceptInvitationToOrganization` mutation."""
input AcceptInvitationToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  code: String
  invitationId: UUID!
}

"""The output of our `acceptInvitationToOrganization` mutation."""
type AcceptInvitationToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type AdditionalInformation {
  label: String
  values: String
}

"""Event from organizations"""
type Attendee {
  additionalData: [AdditionalInformation]

  """Reads and enables pagination through a set of `AttendeeFormField`."""
  attendeeFormFields(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttendeeFormFieldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttendeeFormFieldFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AttendeeFormField`."""
    orderBy: [AttendeeFormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeeFormFieldsConnection!
  civility: String!
  createdAt: Datetime!
  email: String
  eventId: UUID
  firstname: String!
  id: UUID!
  isEmailSent: Boolean
  isFundraisingGenerosityOk: Boolean
  isInscriptor: Boolean
  isNewsEventEmail: Boolean
  isNewsFondationEmail: Boolean
  isVip: Boolean
  lastname: String!
  notes: String
  panelNumber: Int
  pdfUrl: String
  qrCodeUrl: String

  """Reads a single `Registration` that is related to this `Attendee`."""
  registration: Registration
  registrationId: UUID
  status: AttendeeStatus!
  ticketNumber: String!
  updatedAt: Datetime!
}

"""
A condition to be used against `Attendee` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttendeeCondition {
  """Checks for equality with the object’s `civility` field."""
  civility: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `firstname` field."""
  firstname: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isInscriptor` field."""
  isInscriptor: Boolean

  """Checks for equality with the object’s `isNewsEventEmail` field."""
  isNewsEventEmail: Boolean

  """Checks for equality with the object’s `isNewsFondationEmail` field."""
  isNewsFondationEmail: Boolean

  """Checks for equality with the object’s `isVip` field."""
  isVip: Boolean

  """Checks for equality with the object’s `lastname` field."""
  lastname: String

  """Checks for equality with the object’s `panelNumber` field."""
  panelNumber: Int

  """Checks for equality with the object’s `registrationId` field."""
  registrationId: UUID

  """Checks for equality with the object’s `status` field."""
  status: AttendeeStatus

  """Checks for equality with the object’s `ticketNumber` field."""
  ticketNumber: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Attendee` object types. All fields are combined with a logical ‘and.’
"""
input AttendeeFilter {
  """Checks for all expressions in this list."""
  and: [AttendeeFilter!]

  """Filter by the object’s `attendeeFormFields` relation."""
  attendeeFormFields: AttendeeToManyAttendeeFormFieldFilter

  """Some related `attendeeFormFields` exist."""
  attendeeFormFieldsExist: Boolean

  """Filter by the object’s `civility` field."""
  civility: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `eventId` field."""
  eventId: UUIDFilter

  """Filter by the object’s `firstname` field."""
  firstname: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isInscriptor` field."""
  isInscriptor: BooleanFilter

  """Filter by the object’s `isNewsEventEmail` field."""
  isNewsEventEmail: BooleanFilter

  """Filter by the object’s `isNewsFondationEmail` field."""
  isNewsFondationEmail: BooleanFilter

  """Filter by the object’s `isVip` field."""
  isVip: BooleanFilter

  """Filter by the object’s `lastname` field."""
  lastname: StringFilter

  """Negates the expression."""
  not: AttendeeFilter

  """Checks for any expressions in this list."""
  or: [AttendeeFilter!]

  """Filter by the object’s `panelNumber` field."""
  panelNumber: IntFilter

  """Filter by the object’s `registration` relation."""
  registration: RegistrationFilter

  """A related `registration` exists."""
  registrationExists: Boolean

  """Filter by the object’s `registrationId` field."""
  registrationId: UUIDFilter

  """Filter by the object’s `status` field."""
  status: AttendeeStatusFilter

  """Filter by the object’s `ticketNumber` field."""
  ticketNumber: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

type AttendeeFormField {
  """Reads a single `Attendee` that is related to this `AttendeeFormField`."""
  attendee: Attendee
  attendeeId: UUID!
  createdAt: Datetime!

  """
  Reads a single `FormField` that is related to this `AttendeeFormField`.
  """
  field: FormField
  fieldId: UUID!
  id: UUID!
  updatedAt: Datetime!
  value: String
}

"""
A condition to be used against `AttendeeFormField` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AttendeeFormFieldCondition {
  """Checks for equality with the object’s `attendeeId` field."""
  attendeeId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `fieldId` field."""
  fieldId: UUID

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `AttendeeFormField` object types. All fields are combined with a logical ‘and.’
"""
input AttendeeFormFieldFilter {
  """Checks for all expressions in this list."""
  and: [AttendeeFormFieldFilter!]

  """Filter by the object’s `attendee` relation."""
  attendee: AttendeeFilter

  """Filter by the object’s `attendeeId` field."""
  attendeeId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `field` relation."""
  field: FormFieldFilter

  """Filter by the object’s `fieldId` field."""
  fieldId: UUIDFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: AttendeeFormFieldFilter

  """Checks for any expressions in this list."""
  or: [AttendeeFormFieldFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `AttendeeFormField`"""
input AttendeeFormFieldInput {
  attendeeId: UUID!
  createdAt: Datetime
  fieldId: UUID!
  id: UUID
  updatedAt: Datetime
  value: String
}

"""
Represents an update to a `AttendeeFormField`. Fields that are set will be updated.
"""
input AttendeeFormFieldPatch {
  attendeeId: UUID
  createdAt: Datetime
  fieldId: UUID
  id: UUID
  updatedAt: Datetime
  value: String
}

"""A connection to a list of `AttendeeFormField` values."""
type AttendeeFormFieldsConnection {
  """
  A list of edges which contains the `AttendeeFormField` and cursor to aid in pagination.
  """
  edges: [AttendeeFormFieldsEdge!]!

  """A list of `AttendeeFormField` objects."""
  nodes: [AttendeeFormField!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AttendeeFormField` you could get from the connection.
  """
  totalCount: Int!
}

"""A `AttendeeFormField` edge in the connection."""
type AttendeeFormFieldsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AttendeeFormField` at the end of the edge."""
  node: AttendeeFormField!
}

"""Methods to use when ordering `AttendeeFormField`."""
enum AttendeeFormFieldsOrderBy {
  ATTENDEE_ID_ASC
  ATTENDEE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  FIELD_ID_ASC
  FIELD_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type AttendeeImport {
  data: Attendee
  errorCode: String
  errorMessage: String
  errorValue: String
}

"""An input for mutations affecting `Attendee`"""
input AttendeeInput {
  civility: String!
  createdAt: Datetime
  email: String
  firstname: String!
  id: UUID
  isEmailSent: Boolean
  isFundraisingGenerosityOk: Boolean
  isInscriptor: Boolean
  isNewsEventEmail: Boolean
  isNewsFondationEmail: Boolean
  isVip: Boolean
  lastname: String!
  notes: String
  panelNumber: Int
  pdfUrl: String
  qrCodeUrl: String
  registrationId: UUID
  status: AttendeeStatus
  ticketNumber: String
  updatedAt: Datetime
}

"""
Represents an update to a `Attendee`. Fields that are set will be updated.
"""
input AttendeePatch {
  civility: String
  createdAt: Datetime
  email: String
  firstname: String
  id: UUID
  isEmailSent: Boolean
  isFundraisingGenerosityOk: Boolean
  isInscriptor: Boolean
  isNewsEventEmail: Boolean
  isNewsFondationEmail: Boolean
  isVip: Boolean
  lastname: String
  notes: String
  panelNumber: Int
  pdfUrl: String
  qrCodeUrl: String
  registrationId: UUID
  status: AttendeeStatus
  ticketNumber: String
  updatedAt: Datetime
}

"""A connection to a list of `Attendee` values."""
type AttendeesConnection {
  """
  A list of edges which contains the `Attendee` and cursor to aid in pagination.
  """
  edges: [AttendeesEdge!]!

  """A list of `Attendee` objects."""
  nodes: [Attendee!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Attendee` you could get from the connection."""
  totalCount: Int!
}

"""A `Attendee` edge in the connection."""
type AttendeesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Attendee` at the end of the edge."""
  node: Attendee!
}

"""Methods to use when ordering `Attendee`."""
enum AttendeesOrderBy {
  CIVILITY_ASC
  CIVILITY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EMAIL_ASC
  EMAIL_DESC
  FIRSTNAME_ASC
  FIRSTNAME_DESC
  ID_ASC
  ID_DESC
  IS_INSCRIPTOR_ASC
  IS_INSCRIPTOR_DESC
  IS_NEWS_EVENT_EMAIL_ASC
  IS_NEWS_EVENT_EMAIL_DESC
  IS_NEWS_FONDATION_EMAIL_ASC
  IS_NEWS_FONDATION_EMAIL_DESC
  IS_VIP_ASC
  IS_VIP_DESC
  LASTNAME_ASC
  LASTNAME_DESC
  NATURAL
  PANEL_NUMBER_ASC
  PANEL_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REGISTRATION_ID_ASC
  REGISTRATION_ID_DESC
  STATUS_ASC
  STATUS_DESC
  TICKET_NUMBER_ASC
  TICKET_NUMBER_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum AttendeeStatus {
  """Inscription annulée"""
  CANCELLED

  """Présence confirmée à l'évenement"""
  CONFIRMED

  """En attente"""
  IDLE

  """Panneau scanné"""
  PANEL_SCAN

  """Ticket scanné"""
  TICKET_SCAN
}

"""
A filter to be used against AttendeeStatus fields. All fields are combined with a logical ‘and.’
"""
input AttendeeStatusFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: AttendeeStatus

  """Equal to the specified value."""
  equalTo: AttendeeStatus

  """Greater than the specified value."""
  greaterThan: AttendeeStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: AttendeeStatus

  """Included in the specified list."""
  in: [AttendeeStatus!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: AttendeeStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: AttendeeStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: AttendeeStatus

  """Not equal to the specified value."""
  notEqualTo: AttendeeStatus

  """Not included in the specified list."""
  notIn: [AttendeeStatus!]
}

"""
A filter to be used against many `AttendeeFormField` object types. All fields are combined with a logical ‘and.’
"""
input AttendeeToManyAttendeeFormFieldFilter {
  """
  Every related `AttendeeFormField` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AttendeeFormFieldFilter

  """
  No related `AttendeeFormField` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AttendeeFormFieldFilter

  """
  Some related `AttendeeFormField` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AttendeeFormFieldFilter
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""All input for the `cancelInvitation` mutation."""
input CancelInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  invitationId: UUID!
}

"""The output of our `cancelInvitation` mutation."""
type CancelInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `changeMembershipRole` mutation."""
input ChangeMembershipRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  membershipId: UUID!
  role: String!
}

"""The output of our `changeMembershipRole` mutation."""
type ChangeMembershipRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization
  organizationMembership: OrganizationMembership

  """An edge for our `OrganizationMembership`. May be used by Relay 1."""
  organizationMembershipEdge(
    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
}

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  oldPassword: String!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""An input for mutations affecting `CompleteAttendee`"""
input CompleteAttendeeInput {
  attendee: AttendeeInput
  attendeeFormFields: [AttendeeFormFieldInput]
}

"""All input for the `confirmAccountDeletion` mutation."""
input ConfirmAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
}

"""The output of our `confirmAccountDeletion` mutation."""
type ConfirmAccountDeletionPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `AttendeeFormField` mutation."""
input CreateAttendeeFormFieldInput {
  """The `AttendeeFormField` to be created by this mutation."""
  attendeeFormField: AttendeeFormFieldInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `AttendeeFormField` mutation."""
type CreateAttendeeFormFieldPayload {
  """Reads a single `Attendee` that is related to this `AttendeeFormField`."""
  attendee: Attendee

  """The `AttendeeFormField` that was created by this mutation."""
  attendeeFormField: AttendeeFormField

  """An edge for our `AttendeeFormField`. May be used by Relay 1."""
  attendeeFormFieldEdge(
    """The method to use when ordering `AttendeeFormField`."""
    orderBy: [AttendeeFormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeeFormFieldsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FormField` that is related to this `AttendeeFormField`.
  """
  field: FormField

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Attendee` mutation."""
input CreateAttendeeInput {
  """The `Attendee` to be created by this mutation."""
  attendee: AttendeeInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Attendee` mutation."""
type CreateAttendeePayload {
  """The `Attendee` that was created by this mutation."""
  attendee: Attendee

  """An edge for our `Attendee`. May be used by Relay 1."""
  attendeeEdge(
    """The method to use when ordering `Attendee`."""
    orderBy: [AttendeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Registration` that is related to this `Attendee`."""
  registration: Registration
}

"""All input for the create `EventBranding` mutation."""
input CreateEventBrandingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EventBranding` to be created by this mutation."""
  eventBranding: EventBrandingInput!
}

"""The output of our create `EventBranding` mutation."""
type CreateEventBrandingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `EventBranding`."""
  event: Event

  """The `EventBranding` that was created by this mutation."""
  eventBranding: EventBranding

  """An edge for our `EventBranding`. May be used by Relay 1."""
  eventBrandingEdge(
    """The method to use when ordering `EventBranding`."""
    orderBy: [EventBrandingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventBrandingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Event` mutation."""
input CreateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Event` to be created by this mutation."""
  event: EventInput!
}

"""The output of our create `Event` mutation."""
type CreateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was created by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """Reads a single `Organization` that is related to this `Event`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FormField` mutation."""
input CreateFormFieldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormField` to be created by this mutation."""
  formField: FormFieldInput!
}

"""The output of our create `FormField` mutation."""
type CreateFormFieldPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `FormField`."""
  event: Event

  """The `FormField` that was created by this mutation."""
  formField: FormField

  """An edge for our `FormField`. May be used by Relay 1."""
  formFieldEdge(
    """The method to use when ordering `FormField`."""
    orderBy: [FormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormFieldsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Log` mutation."""
input CreateLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Log` to be created by this mutation."""
  log: LogInput!
}

"""The output of our create `Log` mutation."""
type CreateLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `Log`."""
  event: Event

  """The `Log` that was created by this mutation."""
  log: Log

  """An edge for our `Log`. May be used by Relay 1."""
  logEdge(
    """The method to use when ordering `Log`."""
    orderBy: [LogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createOrganization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the create `OrganizationInvitation` mutation."""
input CreateOrganizationInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OrganizationInvitation` to be created by this mutation."""
  organizationInvitation: OrganizationInvitationInput!
}

"""The output of our create `OrganizationInvitation` mutation."""
type CreateOrganizationInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organization` that is related to this `OrganizationInvitation`.
  """
  organization: Organization

  """The `OrganizationInvitation` that was created by this mutation."""
  organizationInvitation: OrganizationInvitation

  """An edge for our `OrganizationInvitation`. May be used by Relay 1."""
  organizationInvitationEdge(
    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `OrganizationInvitation`.
  """
  user: User
}

"""All input for the create `OrganizationMembership` mutation."""
input CreateOrganizationMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OrganizationMembership` to be created by this mutation."""
  organizationMembership: OrganizationMembershipInput!
}

"""The output of our create `OrganizationMembership` mutation."""
type CreateOrganizationMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization

  """The `OrganizationMembership` that was created by this mutation."""
  organizationMembership: OrganizationMembership

  """An edge for our `OrganizationMembership`. May be used by Relay 1."""
  organizationMembershipEdge(
    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
}

"""The output of our `createOrganization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Registration` mutation."""
input CreateRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Registration` to be created by this mutation."""
  registration: RegistrationInput!
}

"""The output of our create `Registration` mutation."""
type CreateRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `Registration`."""
  event: Event

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Registration` that was created by this mutation."""
  registration: Registration

  """An edge for our `Registration`. May be used by Relay 1."""
  registrationEdge(
    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsEdge
}

"""All input for the create `UserAuthentication` mutation."""
input CreateUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserAuthentication` to be created by this mutation."""
  userAuthentication: UserAuthenticationInput!
}

"""The output of our create `UserAuthentication` mutation."""
type CreateUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was created by this mutation."""
  userAuthentication: UserAuthentication

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A `UUID` edge in the connection."""
type CurrentUserInvitedOrganizationIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `UUID` values."""
type CurrentUserInvitedOrganizationIdsConnection {
  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserInvitedOrganizationIdEdge!]!

  """A list of `UUID` objects."""
  nodes: [UUID]!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type CurrentUserMemberOrganizationIdEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `UUID` values."""
type CurrentUserMemberOrganizationIdsConnection {
  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserMemberOrganizationIdEdge!]!

  """A list of `UUID` objects."""
  nodes: [UUID]!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteAttendeeFormField` mutation."""
input DeleteAttendeeFormFieldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `AttendeeFormField` mutation."""
type DeleteAttendeeFormFieldPayload {
  """Reads a single `Attendee` that is related to this `AttendeeFormField`."""
  attendee: Attendee

  """The `AttendeeFormField` that was deleted by this mutation."""
  attendeeFormField: AttendeeFormField

  """An edge for our `AttendeeFormField`. May be used by Relay 1."""
  attendeeFormFieldEdge(
    """The method to use when ordering `AttendeeFormField`."""
    orderBy: [AttendeeFormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeeFormFieldsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAttendeeFormFieldNodeId: ID

  """
  Reads a single `FormField` that is related to this `AttendeeFormField`.
  """
  field: FormField

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteAttendee` mutation."""
input DeleteAttendeeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Attendee` mutation."""
type DeleteAttendeePayload {
  """The `Attendee` that was deleted by this mutation."""
  attendee: Attendee

  """An edge for our `Attendee`. May be used by Relay 1."""
  attendeeEdge(
    """The method to use when ordering `Attendee`."""
    orderBy: [AttendeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAttendeeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Registration` that is related to this `Attendee`."""
  registration: Registration
}

"""All input for the `deleteEventBranding` mutation."""
input DeleteEventBrandingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `EventBranding` mutation."""
type DeleteEventBrandingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEventBrandingNodeId: ID

  """Reads a single `Event` that is related to this `EventBranding`."""
  event: Event

  """The `EventBranding` that was deleted by this mutation."""
  eventBranding: EventBranding

  """An edge for our `EventBranding`. May be used by Relay 1."""
  eventBrandingEdge(
    """The method to use when ordering `EventBranding`."""
    orderBy: [EventBrandingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventBrandingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEvent` mutation."""
input DeleteEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Event` mutation."""
type DeleteEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEventNodeId: ID

  """The `Event` that was deleted by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """Reads a single `Organization` that is related to this `Event`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

input DeleteFileInput {
  key: String!
}

type DeleteFilePayload {
  success: Boolean
}

"""All input for the `deleteFormField` mutation."""
input DeleteFormFieldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `FormField` mutation."""
type DeleteFormFieldPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormFieldNodeId: ID

  """Reads a single `Event` that is related to this `FormField`."""
  event: Event

  """The `FormField` that was deleted by this mutation."""
  formField: FormField

  """An edge for our `FormField`. May be used by Relay 1."""
  formFieldEdge(
    """The method to use when ordering `FormField`."""
    orderBy: [FormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormFieldsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteLog` mutation."""
input DeleteLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Log` mutation."""
type DeleteLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedLogNodeId: ID

  """Reads a single `Event` that is related to this `Log`."""
  event: Event

  """The `Log` that was deleted by this mutation."""
  log: Log

  """An edge for our `Log`. May be used by Relay 1."""
  logEdge(
    """The method to use when ordering `Log`."""
    orderBy: [LogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOrganization` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteOrganizationInvitation` mutation."""
input DeleteOrganizationInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `OrganizationInvitation` mutation."""
type DeleteOrganizationInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationInvitationNodeId: ID

  """
  Reads a single `Organization` that is related to this `OrganizationInvitation`.
  """
  organization: Organization

  """The `OrganizationInvitation` that was deleted by this mutation."""
  organizationInvitation: OrganizationInvitation

  """An edge for our `OrganizationInvitation`. May be used by Relay 1."""
  organizationInvitationEdge(
    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `OrganizationInvitation`.
  """
  user: User
}

"""All input for the `deleteOrganizationMembership` mutation."""
input DeleteOrganizationMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `OrganizationMembership` mutation."""
type DeleteOrganizationMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationMembershipNodeId: ID

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization

  """The `OrganizationMembership` that was deleted by this mutation."""
  organizationMembership: OrganizationMembership

  """An edge for our `OrganizationMembership`. May be used by Relay 1."""
  organizationMembershipEdge(
    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
}

"""The output of our delete `Organization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationNodeId: ID

  """The `Organization` that was deleted by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteRegistration` mutation."""
input DeleteRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Registration` mutation."""
type DeleteRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRegistrationNodeId: ID

  """Reads a single `Event` that is related to this `Registration`."""
  event: Event

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Registration` that was deleted by this mutation."""
  registration: Registration

  """An edge for our `Registration`. May be used by Relay 1."""
  registrationEdge(
    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsEdge
}

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserAuthenticationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was deleted by this mutation."""
  userAuthentication: UserAuthentication

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was deleted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type Event {
  addressLine1: String
  addressLine2: String

  """Reads and enables pagination through a set of `Attendee`."""
  attendees(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttendeeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): AttendeesConnection!
  bookingEndsAt: Datetime
  bookingStartsAt: Datetime
  capacity: Int
  city: String
  country: String
  createdAt: Datetime!
  description: String
  details: String
  endsAt: Datetime

  """Reads a single `EventBranding` that is related to this `Event`."""
  eventBranding: EventBranding

  """Reads and enables pagination through a set of `EventBranding`."""
  eventBrandings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventBrandingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventBrandingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventBranding`."""
    orderBy: [EventBrandingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventBrandingsConnection! @deprecated(reason: "Please use eventBranding instead")

  """Reads and enables pagination through a set of `FormField`."""
  formFields(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormFieldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFieldFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormField`."""
    orderBy: [FormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormFieldsConnection!
  id: UUID!
  isCancelled: Boolean!
  isDraft: Boolean!
  lat: Float

  """Reads and enables pagination through a set of `Log`."""
  logs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LogFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Log`."""
    orderBy: [LogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogsConnection!

  """Reads and enables pagination through a set of `Log`."""
  logsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LogFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Log`."""
    orderBy: [LogsOrderBy!]
  ): [Log!]!
  lon: Float
  name: String!

  """Reads a single `Organization` that is related to this `Event`."""
  organization: Organization
  organizationId: UUID!
  placeName: String

  """Reads and enables pagination through a set of `Registration`."""
  registrations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RegistrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RegistrationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsConnection!
  slug: String
  startsAt: Datetime
  state: String
  status: EventStatus @deprecated(reason: "use state instead")
  totalConfirmedRegistrations: Int
  totalRegistrations: Int
  updatedAt: Datetime!
  webhooks: [String]
  zipCode: String
}

type EventBranding {
  createdAt: Datetime!
  cssVariables: JSON

  """Reads a single `Event` that is related to this `EventBranding`."""
  event: Event
  eventId: UUID!
  font: Fonts
  headerMailContact: String
  headerMailName: String
  id: UUID!
  imageTicketUrl: String
  logo: String
  richText: String
  shortText: String
  updatedAt: Datetime!
}

"""
A condition to be used against `EventBranding` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventBrandingCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: UUID

  """Checks for equality with the object’s `font` field."""
  font: Fonts

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `EventBranding` object types. All fields are combined with a logical ‘and.’
"""
input EventBrandingFilter {
  """Checks for all expressions in this list."""
  and: [EventBrandingFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `event` relation."""
  event: EventFilter

  """Filter by the object’s `eventId` field."""
  eventId: UUIDFilter

  """Filter by the object’s `font` field."""
  font: FontsFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: EventBrandingFilter

  """Checks for any expressions in this list."""
  or: [EventBrandingFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `EventBranding`"""
input EventBrandingInput {
  createdAt: Datetime
  cssVariables: JSON
  eventId: UUID!
  font: Fonts
  headerMailContact: String
  headerMailName: String
  id: UUID
  imageTicketUrl: String
  logo: String
  richText: String
  shortText: String
  updatedAt: Datetime
}

"""
Represents an update to a `EventBranding`. Fields that are set will be updated.
"""
input EventBrandingPatch {
  createdAt: Datetime
  cssVariables: JSON
  eventId: UUID
  font: Fonts
  headerMailContact: String
  headerMailName: String
  id: UUID
  imageTicketUrl: String
  logo: String
  richText: String
  shortText: String
  updatedAt: Datetime
}

"""A connection to a list of `EventBranding` values."""
type EventBrandingsConnection {
  """
  A list of edges which contains the `EventBranding` and cursor to aid in pagination.
  """
  edges: [EventBrandingsEdge!]!

  """A list of `EventBranding` objects."""
  nodes: [EventBranding!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventBranding` you could get from the connection."""
  totalCount: Int!
}

"""A `EventBranding` edge in the connection."""
type EventBrandingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventBranding` at the end of the edge."""
  node: EventBranding!
}

"""Methods to use when ordering `EventBranding`."""
enum EventBrandingsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  FONT_ASC
  FONT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `Event` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EventCondition {
  """Checks for equality with the object’s `bookingEndsAt` field."""
  bookingEndsAt: Datetime

  """Checks for equality with the object’s `bookingStartsAt` field."""
  bookingStartsAt: Datetime

  """Checks for equality with the object’s `capacity` field."""
  capacity: Int

  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `endsAt` field."""
  endsAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isCancelled` field."""
  isCancelled: Boolean

  """Checks for equality with the object’s `isDraft` field."""
  isDraft: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `startsAt` field."""
  startsAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Event` object types. All fields are combined with a logical ‘and.’
"""
input EventFilter {
  """Checks for all expressions in this list."""
  and: [EventFilter!]

  """Filter by the object’s `bookingEndsAt` field."""
  bookingEndsAt: DatetimeFilter

  """Filter by the object’s `bookingStartsAt` field."""
  bookingStartsAt: DatetimeFilter

  """Filter by the object’s `capacity` field."""
  capacity: IntFilter

  """Filter by the object’s `city` field."""
  city: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `endsAt` field."""
  endsAt: DatetimeFilter

  """Filter by the object’s `eventBranding` relation."""
  eventBranding: EventBrandingFilter

  """A related `eventBranding` exists."""
  eventBrandingExists: Boolean

  """Filter by the object’s `formFields` relation."""
  formFields: EventToManyFormFieldFilter

  """Some related `formFields` exist."""
  formFieldsExist: Boolean

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isCancelled` field."""
  isCancelled: BooleanFilter

  """Filter by the object’s `isDraft` field."""
  isDraft: BooleanFilter

  """Filter by the object’s `logs` relation."""
  logs: EventToManyLogFilter

  """Some related `logs` exist."""
  logsExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: EventFilter

  """Checks for any expressions in this list."""
  or: [EventFilter!]

  """Filter by the object’s `organization` relation."""
  organization: OrganizationFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `registrations` relation."""
  registrations: EventToManyRegistrationFilter

  """Some related `registrations` exist."""
  registrationsExist: Boolean

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `startsAt` field."""
  startsAt: DatetimeFilter

  """Filter by the object’s `state` field."""
  state: StringFilter

  """Filter by the object’s `totalConfirmedRegistrations` field."""
  totalConfirmedRegistrations: IntFilter

  """Filter by the object’s `totalRegistrations` field."""
  totalRegistrations: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Event`"""
input EventInput {
  addressLine1: String
  addressLine2: String
  bookingEndsAt: Datetime
  bookingStartsAt: Datetime
  capacity: Int
  city: String
  country: String
  createdAt: Datetime
  description: String
  details: String
  endsAt: Datetime
  id: UUID
  isCancelled: Boolean
  isDraft: Boolean
  lat: Float
  lon: Float
  name: String!
  organizationId: UUID!
  placeName: String
  slug: String
  startsAt: Datetime
  status: EventStatus
  updatedAt: Datetime
  webhooks: [String]
  zipCode: String
}

"""
Represents an update to a `Event`. Fields that are set will be updated.
"""
input EventPatch {
  addressLine1: String
  addressLine2: String
  bookingEndsAt: Datetime
  bookingStartsAt: Datetime
  capacity: Int
  city: String
  country: String
  createdAt: Datetime
  description: String
  details: String
  endsAt: Datetime
  id: UUID
  isCancelled: Boolean
  isDraft: Boolean
  lat: Float
  lon: Float
  name: String
  organizationId: UUID
  placeName: String
  slug: String
  startsAt: Datetime
  status: EventStatus
  updatedAt: Datetime
  webhooks: [String]
  zipCode: String
}

"""A connection to a list of `Event` values."""
type EventsConnection {
  """
  A list of edges which contains the `Event` and cursor to aid in pagination.
  """
  edges: [EventsEdge!]!

  """A list of `Event` objects."""
  nodes: [Event!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Event` you could get from the connection."""
  totalCount: Int!
}

"""A `Event` edge in the connection."""
type EventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Event` at the end of the edge."""
  node: Event!
}

"""Methods to use when ordering `Event`."""
enum EventsOrderBy {
  BOOKING_ENDS_AT_ASC
  BOOKING_ENDS_AT_DESC
  BOOKING_STARTS_AT_ASC
  BOOKING_STARTS_AT_DESC
  CAPACITY_ASC
  CAPACITY_DESC
  CITY_ASC
  CITY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ENDS_AT_ASC
  ENDS_AT_DESC
  ID_ASC
  ID_DESC
  IS_CANCELLED_ASC
  IS_CANCELLED_DESC
  IS_DRAFT_ASC
  IS_DRAFT_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
  STARTS_AT_ASC
  STARTS_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum EventStatus {
  """Annulé"""
  CANCELLED

  """Brouillon"""
  DRAFT

  """Terminé"""
  FINISHED

  """En cours"""
  ONGOING

  """A venir"""
  PENDING
}

"""
A filter to be used against many `FormField` object types. All fields are combined with a logical ‘and.’
"""
input EventToManyFormFieldFilter {
  """
  Every related `FormField` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormFieldFilter

  """
  No related `FormField` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormFieldFilter

  """
  Some related `FormField` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormFieldFilter
}

"""
A filter to be used against many `Log` object types. All fields are combined with a logical ‘and.’
"""
input EventToManyLogFilter {
  """
  Every related `Log` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LogFilter

  """
  No related `Log` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LogFilter

  """
  Some related `Log` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LogFilter
}

"""
A filter to be used against many `Registration` object types. All fields are combined with a logical ‘and.’
"""
input EventToManyRegistrationFilter {
  """
  Every related `Registration` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RegistrationFilter

  """
  No related `Registration` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RegistrationFilter

  """
  Some related `Registration` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RegistrationFilter
}

enum FieldTypes {
  """Un input de type `checkbox`"""
  CHECKBOX

  """Un input de type `date`"""
  DATE

  """Un input de type `email`"""
  EMAIL

  """Un input de type `number`"""
  NUMBER

  """Un input de type `radio`"""
  RADIO

  """Un input de type `select`"""
  SELECT

  """Un input de type `tel`"""
  TEL

  """Un input de type `text`"""
  TEXT

  """Un input de type `textarea`"""
  TEXTAREA
}

"""
A filter to be used against FieldTypes fields. All fields are combined with a logical ‘and.’
"""
input FieldTypesFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: FieldTypes

  """Equal to the specified value."""
  equalTo: FieldTypes

  """Greater than the specified value."""
  greaterThan: FieldTypes

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: FieldTypes

  """Included in the specified list."""
  in: [FieldTypes!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: FieldTypes

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: FieldTypes

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: FieldTypes

  """Not equal to the specified value."""
  notEqualTo: FieldTypes

  """Not included in the specified list."""
  notIn: [FieldTypes!]
}

enum Fonts {
  """Montserrat"""
  MONTSERRAT

  """Open Sans"""
  OPENSANS

  """Roboto"""
  ROBOTO
}

"""
A filter to be used against Fonts fields. All fields are combined with a logical ‘and.’
"""
input FontsFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Fonts

  """Equal to the specified value."""
  equalTo: Fonts

  """Greater than the specified value."""
  greaterThan: Fonts

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Fonts

  """Included in the specified list."""
  in: [Fonts!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Fonts

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Fonts

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Fonts

  """Not equal to the specified value."""
  notEqualTo: Fonts

  """Not included in the specified list."""
  notIn: [Fonts!]
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type FormField {
  appliesToAllAttendees: Boolean!

  """Reads and enables pagination through a set of `AttendeeFormField`."""
  attendeeFormFieldsByFieldId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttendeeFormFieldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttendeeFormFieldFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AttendeeFormField`."""
    orderBy: [AttendeeFormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeeFormFieldsConnection!
  createdAt: Datetime!

  """Reads a single `Event` that is related to this `FormField`."""
  event: Event
  eventId: UUID!
  id: UUID!
  isDeletable: Boolean!
  isRequiredForAttendee: Boolean!
  isRequiredForInscriptor: Boolean!
  label: String!
  name: String
  options: [String]
  placeholder: String
  position: Int!
  type: FieldTypes!
  updatedAt: Datetime!
}

"""
A condition to be used against `FormField` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormFieldCondition {
  """Checks for equality with the object’s `appliesToAllAttendees` field."""
  appliesToAllAttendees: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: UUID

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isDeletable` field."""
  isDeletable: Boolean

  """Checks for equality with the object’s `isRequiredForAttendee` field."""
  isRequiredForAttendee: Boolean

  """Checks for equality with the object’s `isRequiredForInscriptor` field."""
  isRequiredForInscriptor: Boolean

  """Checks for equality with the object’s `options` field."""
  options: [String]

  """Checks for equality with the object’s `placeholder` field."""
  placeholder: String

  """Checks for equality with the object’s `position` field."""
  position: Int

  """Checks for equality with the object’s `type` field."""
  type: FieldTypes

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `FormField` object types. All fields are combined with a logical ‘and.’
"""
input FormFieldFilter {
  """Checks for all expressions in this list."""
  and: [FormFieldFilter!]

  """Filter by the object’s `appliesToAllAttendees` field."""
  appliesToAllAttendees: BooleanFilter

  """Filter by the object’s `attendeeFormFieldsByFieldId` relation."""
  attendeeFormFieldsByFieldId: FormFieldToManyAttendeeFormFieldFilter

  """Some related `attendeeFormFieldsByFieldId` exist."""
  attendeeFormFieldsByFieldIdExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `event` relation."""
  event: EventFilter

  """Filter by the object’s `eventId` field."""
  eventId: UUIDFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isDeletable` field."""
  isDeletable: BooleanFilter

  """Filter by the object’s `isRequiredForAttendee` field."""
  isRequiredForAttendee: BooleanFilter

  """Filter by the object’s `isRequiredForInscriptor` field."""
  isRequiredForInscriptor: BooleanFilter

  """Negates the expression."""
  not: FormFieldFilter

  """Filter by the object’s `options` field."""
  options: StringListFilter

  """Checks for any expressions in this list."""
  or: [FormFieldFilter!]

  """Filter by the object’s `placeholder` field."""
  placeholder: StringFilter

  """Filter by the object’s `position` field."""
  position: IntFilter

  """Filter by the object’s `type` field."""
  type: FieldTypesFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `FormField`"""
input FormFieldInput {
  appliesToAllAttendees: Boolean
  createdAt: Datetime
  eventId: UUID!
  id: UUID
  isDeletable: Boolean
  isRequiredForAttendee: Boolean
  isRequiredForInscriptor: Boolean
  label: String!
  name: String
  options: [String]
  placeholder: String
  position: Int
  type: FieldTypes!
  updatedAt: Datetime
}

"""
Represents an update to a `FormField`. Fields that are set will be updated.
"""
input FormFieldPatch {
  appliesToAllAttendees: Boolean
  createdAt: Datetime
  eventId: UUID
  id: UUID
  isDeletable: Boolean
  isRequiredForAttendee: Boolean
  isRequiredForInscriptor: Boolean
  label: String
  name: String
  options: [String]
  placeholder: String
  position: Int
  type: FieldTypes
  updatedAt: Datetime
}

"""A connection to a list of `FormField` values."""
type FormFieldsConnection {
  """
  A list of edges which contains the `FormField` and cursor to aid in pagination.
  """
  edges: [FormFieldsEdge!]!

  """A list of `FormField` objects."""
  nodes: [FormField!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormField` you could get from the connection."""
  totalCount: Int!
}

"""A `FormField` edge in the connection."""
type FormFieldsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormField` at the end of the edge."""
  node: FormField!
}

"""Methods to use when ordering `FormField`."""
enum FormFieldsOrderBy {
  APPLIES_TO_ALL_ATTENDEES_ASC
  APPLIES_TO_ALL_ATTENDEES_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  ID_ASC
  ID_DESC
  IS_DELETABLE_ASC
  IS_DELETABLE_DESC
  IS_REQUIRED_FOR_ATTENDEE_ASC
  IS_REQUIRED_FOR_ATTENDEE_DESC
  IS_REQUIRED_FOR_INSCRIPTOR_ASC
  IS_REQUIRED_FOR_INSCRIPTOR_DESC
  NATURAL
  OPTIONS_ASC
  OPTIONS_DESC
  PLACEHOLDER_ASC
  PLACEHOLDER_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `AttendeeFormField` object types. All fields are combined with a logical ‘and.’
"""
input FormFieldToManyAttendeeFormFieldFilter {
  """
  Every related `AttendeeFormField` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AttendeeFormFieldFilter

  """
  No related `AttendeeFormField` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AttendeeFormFieldFilter

  """
  Some related `AttendeeFormField` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AttendeeFormFieldFilter
}

input GeneratePresignedPostInput {
  key: String!
}

type GeneratePresignedPostPayload {
  fields: JSON
  url: String
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""All input for the `inviteToOrganization` mutation."""
input InviteToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  organizationId: UUID!
  role: String
  username: String
}

"""The output of our `inviteToOrganization` mutation."""
type InviteToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  typeErrorCodeAndMessage: TypeErrorCodeAndMessage
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Logs from events"""
type Log {
  createdAt: Datetime!

  """Reads a single `Event` that is related to this `Log`."""
  event: Event
  eventId: UUID
  id: UUID!
  payload: JSON
  status: LogsStatus!
  updatedAt: Datetime!
}

"""
A condition to be used against `Log` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LogCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: UUID

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `status` field."""
  status: LogsStatus

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Log` object types. All fields are combined with a logical ‘and.’
"""
input LogFilter {
  """Checks for all expressions in this list."""
  and: [LogFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `event` relation."""
  event: EventFilter

  """A related `event` exists."""
  eventExists: Boolean

  """Filter by the object’s `eventId` field."""
  eventId: UUIDFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: LogFilter

  """Checks for any expressions in this list."""
  or: [LogFilter!]

  """Filter by the object’s `status` field."""
  status: LogsStatusFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

input LoginInput {
  password: String!
  username: String!
}

type LoginPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

"""An input for mutations affecting `Log`"""
input LogInput {
  createdAt: Datetime
  eventId: UUID
  id: UUID
  payload: JSON
  status: LogsStatus!
  updatedAt: Datetime
}

type LogoutPayload {
  success: Boolean
}

"""Represents an update to a `Log`. Fields that are set will be updated."""
input LogPatch {
  createdAt: Datetime
  eventId: UUID
  id: UUID
  payload: JSON
  status: LogsStatus
  updatedAt: Datetime
}

"""A connection to a list of `Log` values."""
type LogsConnection {
  """
  A list of edges which contains the `Log` and cursor to aid in pagination.
  """
  edges: [LogsEdge!]!

  """A list of `Log` objects."""
  nodes: [Log!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Log` you could get from the connection."""
  totalCount: Int!
}

"""A `Log` edge in the connection."""
type LogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Log` at the end of the edge."""
  node: Log!
}

"""Methods to use when ordering `Log`."""
enum LogsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_ASC
  STATUS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum LogsStatus {
  """Une erreur s'est produite"""
  ERROR

  """Tout se passe bien"""
  OK

  """Attention"""
  WARNING

  """Pas d'email"""
  WARNING_EMAIL

  """Pas de panneau"""
  WARNING_PANEL

  """Probleme de QR Code"""
  WARNING_SIGN_CODE
}

"""
A filter to be used against LogsStatus fields. All fields are combined with a logical ‘and.’
"""
input LogsStatusFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: LogsStatus

  """Equal to the specified value."""
  equalTo: LogsStatus

  """Greater than the specified value."""
  greaterThan: LogsStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: LogsStatus

  """Included in the specified list."""
  in: [LogsStatus!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: LogsStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: LogsStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: LogsStatus

  """Not equal to the specified value."""
  notEqualTo: LogsStatus

  """Not included in the specified list."""
  notIn: [LogsStatus!]
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  acceptInvitationToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AcceptInvitationToOrganizationInput!
  ): AcceptInvitationToOrganizationPayload
  cancelInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CancelInvitationInput!
  ): CancelInvitationPayload
  changeMembershipRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangeMembershipRoleInput!
  ): ChangeMembershipRolePayload

  """Enter your old password and a new password to change your password."""
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload

  """
  If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion.
  """
  confirmAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmAccountDeletionInput!
  ): ConfirmAccountDeletionPayload

  """Creates a single `Attendee`."""
  createAttendee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttendeeInput!
  ): CreateAttendeePayload

  """Creates a single `AttendeeFormField`."""
  createAttendeeFormField(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttendeeFormFieldInput!
  ): CreateAttendeeFormFieldPayload

  """Creates a single `Event`."""
  createEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventInput!
  ): CreateEventPayload

  """Creates a single `EventBranding`."""
  createEventBranding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventBrandingInput!
  ): CreateEventBrandingPayload

  """Creates a single `FormField`."""
  createFormField(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormFieldInput!
  ): CreateFormFieldPayload

  """Creates a single `Log`."""
  createLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLogInput!
  ): CreateLogPayload
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single `OrganizationInvitation`."""
  createOrganizationInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInvitationInput!
  ): CreateOrganizationInvitationPayload

  """Creates a single `OrganizationMembership`."""
  createOrganizationMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationMembershipInput!
  ): CreateOrganizationMembershipPayload

  """Creates a single `Registration`."""
  createRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRegistrationInput!
  ): CreateRegistrationPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UserAuthentication`."""
  createUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserAuthenticationInput!
  ): CreateUserAuthenticationPayload

  """Deletes a single `Attendee` using a unique key."""
  deleteAttendee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttendeeInput!
  ): DeleteAttendeePayload

  """Deletes a single `AttendeeFormField` using a unique key."""
  deleteAttendeeFormField(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttendeeFormFieldInput!
  ): DeleteAttendeeFormFieldPayload

  """Deletes a single `Event` using a unique key."""
  deleteEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventInput!
  ): DeleteEventPayload

  """Deletes a single `EventBranding` using a unique key."""
  deleteEventBranding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventBrandingInput!
  ): DeleteEventBrandingPayload
  deleteFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileInput!
  ): DeleteFilePayload

  """Deletes a single `FormField` using a unique key."""
  deleteFormField(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormFieldInput!
  ): DeleteFormFieldPayload

  """Deletes a single `Log` using a unique key."""
  deleteLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLogInput!
  ): DeleteLogPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single `OrganizationInvitation` using a unique key."""
  deleteOrganizationInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInvitationInput!
  ): DeleteOrganizationInvitationPayload

  """Deletes a single `OrganizationMembership` using a unique key."""
  deleteOrganizationMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationMembershipInput!
  ): DeleteOrganizationMembershipPayload

  """Deletes a single `Registration` using a unique key."""
  deleteRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRegistrationInput!
  ): DeleteRegistrationPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """
  If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address!
  """
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload
  generatePresignedPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GeneratePresignedPostInput!
  ): GeneratePresignedPostPayload
  inviteToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InviteToOrganizationInput!
  ): InviteToOrganizationPayload

  """
  Use this mutation to log in to your account; this login uses sessions so you do not need to take further action.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload

  """
  Use this mutation to create an account on our system. This may only be used if you are logged out.
  """
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload
  registerAttendees(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterAttendeesInput!
  ): RegisterAttendeesPayload
  registerAttendeesCsv(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterAttendeesCsvInput!
  ): RegisterAttendeesCsvPayload
  registerCompleteAttendeeCsv(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterCompleteAttendeeCsvInput!
  ): RegisterCompleteAttendeeCsvPayload
  registerCompleteAttendees(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterCompleteAttendeesInput!
  ): RegisterCompleteAttendeesPayload
  removeFromOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveFromOrganizationInput!
  ): RemoveFromOrganizationPayload

  """Begin the account deletion flow by requesting the confirmation email"""
  requestAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RequestAccountDeletionInput!
  ): RequestAccountDeletionPayload

  """
  If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently.
  """
  resendEmailVerificationCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResendEmailVerificationCodeInput!
  ): ResendEmailVerificationCodePayload

  """
  After triggering forgotPassword, you'll be sent a reset token. Combine this with your user ID and a new password to reset your password.
  """
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload
  scanAttendee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ScanAttendeeInput!
  ): ScanAttendeePayload
  scanAttendeesAsync(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ScanAttendeesAsyncInput!
  ): ScanAttendeesAsyncPayload

  """Select event to retrieve all attendee and send email to all attendee"""
  sendEmailAllAttendeeEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SendEmailAllAttendeeEventInput!
  ): SendEmailAllAttendeeEventPayload

  """Select ticket_number to send email to attendee"""
  sendEmailAttendeeEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SendEmailAttendeeEventInput!
  ): SendEmailAttendeeEventPayload

  """
  Select event to retrieve all attendee and send email to all attendee and confirm donation
  """
  sendEmailConfirmDonationByEventId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SendEmailConfirmDonationByEventIdInput!
  ): SendEmailConfirmDonationByEventIdPayload
  transferOrganizationOwnership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationOwnershipInput!
  ): TransferOrganizationOwnershipPayload

  """Updates a single `Attendee` using a unique key and a patch."""
  updateAttendee(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttendeeInput!
  ): UpdateAttendeePayload
  updateAttendeeEmailAndSendEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttendeeEmailAndSendEmailInput!
  ): UpdateAttendeeEmailAndSendEmailPayload

  """Updates a single `AttendeeFormField` using a unique key and a patch."""
  updateAttendeeFormField(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttendeeFormFieldInput!
  ): UpdateAttendeeFormFieldPayload

  """Updates a single `Event` using a unique key and a patch."""
  updateEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventInput!
  ): UpdateEventPayload

  """Updates a single `EventBranding` using a unique key and a patch."""
  updateEventBranding(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventBrandingInput!
  ): UpdateEventBrandingPayload

  """Updates a single `FormField` using a unique key and a patch."""
  updateFormField(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormFieldInput!
  ): UpdateFormFieldPayload

  """Updates a single `Log` using a unique key and a patch."""
  updateLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLogInput!
  ): UpdateLogPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """
  Updates a single `OrganizationInvitation` using a unique key and a patch.
  """
  updateOrganizationInvitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInvitationInput!
  ): UpdateOrganizationInvitationPayload

  """
  Updates a single `OrganizationMembership` using a unique key and a patch.
  """
  updateOrganizationMembership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationMembershipInput!
  ): UpdateOrganizationMembershipPayload

  """Updates a single `Registration` using a unique key and a patch."""
  updateRegistration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRegistrationInput!
  ): UpdateRegistrationPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `UserAuthentication` using a unique key and a patch."""
  updateUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAuthenticationInput!
  ): UpdateUserAuthenticationPayload

  """
  Once you have received a verification token for your email, you may call this mutation with that token to make your email verified.
  """
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload
}

"""A company, organization, or institution."""
type Organization {
  createdAt: Datetime!
  currentUserIsOwner: Boolean
  description: String

  """Reads and enables pagination through a set of `Event`."""
  events(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection!
  id: UUID!
  logoUrl: String
  name: String!

  """
  Reads and enables pagination through a set of `OrganizationInvitation`.
  """
  organizationInvitations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationInvitationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationInvitationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsConnection!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection!
  slug: String
  updatedAt: Datetime!
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Organization` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationFilter {
  """Checks for all expressions in this list."""
  and: [OrganizationFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `currentUserIsOwner` field."""
  currentUserIsOwner: BooleanFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `events` relation."""
  events: OrganizationToManyEventFilter

  """Some related `events` exist."""
  eventsExist: Boolean

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: OrganizationFilter

  """Checks for any expressions in this list."""
  or: [OrganizationFilter!]

  """Filter by the object’s `organizationInvitations` relation."""
  organizationInvitations: OrganizationToManyOrganizationInvitationFilter

  """Some related `organizationInvitations` exist."""
  organizationInvitationsExist: Boolean

  """Filter by the object’s `organizationMemberships` relation."""
  organizationMemberships: OrganizationToManyOrganizationMembershipFilter

  """Some related `organizationMemberships` exist."""
  organizationMembershipsExist: Boolean

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

type OrganizationInvitation {
  code: String
  email: String
  id: UUID!

  """
  Reads a single `Organization` that is related to this `OrganizationInvitation`.
  """
  organization: Organization
  organizationId: UUID!
  role: OrganizationMembershipsRolesEnum!

  """
  Reads a single `User` that is related to this `OrganizationInvitation`.
  """
  user: User
  userId: UUID
}

"""
A condition to be used against `OrganizationInvitation` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OrganizationInvitationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `role` field."""
  role: OrganizationMembershipsRolesEnum

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `OrganizationInvitation` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationInvitationFilter {
  """Checks for all expressions in this list."""
  and: [OrganizationInvitationFilter!]

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: OrganizationInvitationFilter

  """Checks for any expressions in this list."""
  or: [OrganizationInvitationFilter!]

  """Filter by the object’s `organization` relation."""
  organization: OrganizationFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `role` field."""
  role: OrganizationMembershipsRolesEnumFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """A related `user` exists."""
  userExists: Boolean

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""An input for mutations affecting `OrganizationInvitation`"""
input OrganizationInvitationInput {
  code: String
  email: String
  id: UUID
  organizationId: UUID!
  role: OrganizationMembershipsRolesEnum
  userId: UUID
}

"""
Represents an update to a `OrganizationInvitation`. Fields that are set will be updated.
"""
input OrganizationInvitationPatch {
  code: String
  email: String
  id: UUID
  organizationId: UUID
  role: OrganizationMembershipsRolesEnum
  userId: UUID
}

"""A connection to a list of `OrganizationInvitation` values."""
type OrganizationInvitationsConnection {
  """
  A list of edges which contains the `OrganizationInvitation` and cursor to aid in pagination.
  """
  edges: [OrganizationInvitationsEdge!]!

  """A list of `OrganizationInvitation` objects."""
  nodes: [OrganizationInvitation!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationInvitation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrganizationInvitation` edge in the connection."""
type OrganizationInvitationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationInvitation` at the end of the edge."""
  node: OrganizationInvitation!
}

"""Methods to use when ordering `OrganizationInvitation`."""
enum OrganizationInvitationsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_ASC
  ROLE_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type OrganizationMembership {
  createdAt: Datetime!
  id: UUID!

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization
  organizationId: UUID!
  role: OrganizationMembershipsRolesEnum!
  updatedAt: Datetime!

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
  userId: UUID!
}

"""
A condition to be used against `OrganizationMembership` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OrganizationMembershipCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `role` field."""
  role: OrganizationMembershipsRolesEnum

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationMembershipFilter {
  """Checks for all expressions in this list."""
  and: [OrganizationMembershipFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: OrganizationMembershipFilter

  """Checks for any expressions in this list."""
  or: [OrganizationMembershipFilter!]

  """Filter by the object’s `organization` relation."""
  organization: OrganizationFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `role` field."""
  role: OrganizationMembershipsRolesEnumFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""An input for mutations affecting `OrganizationMembership`"""
input OrganizationMembershipInput {
  createdAt: Datetime
  id: UUID
  organizationId: UUID!
  role: OrganizationMembershipsRolesEnum
  updatedAt: Datetime
  userId: UUID!
}

"""
Represents an update to a `OrganizationMembership`. Fields that are set will be updated.
"""
input OrganizationMembershipPatch {
  createdAt: Datetime
  id: UUID
  organizationId: UUID
  role: OrganizationMembershipsRolesEnum
  updatedAt: Datetime
  userId: UUID
}

"""A connection to a list of `OrganizationMembership` values."""
type OrganizationMembershipsConnection {
  """
  A list of edges which contains the `OrganizationMembership` and cursor to aid in pagination.
  """
  edges: [OrganizationMembershipsEdge!]!

  """A list of `OrganizationMembership` objects."""
  nodes: [OrganizationMembership!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationMembership` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrganizationMembership` edge in the connection."""
type OrganizationMembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationMembership` at the end of the edge."""
  node: OrganizationMembership!
}

"""Methods to use when ordering `OrganizationMembership`."""
enum OrganizationMembershipsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  MEMBER_NAME_ASC
  MEMBER_NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_ASC
  ROLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

enum OrganizationMembershipsRolesEnum {
  """Admin of the organization"""
  ADMIN

  """Guest of the organization"""
  GUEST

  """Host of the organization's events"""
  HOST

  """Owner of the organization"""
  OWNER
}

"""
A filter to be used against OrganizationMembershipsRolesEnum fields. All fields are combined with a logical ‘and.’
"""
input OrganizationMembershipsRolesEnumFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: OrganizationMembershipsRolesEnum

  """Equal to the specified value."""
  equalTo: OrganizationMembershipsRolesEnum

  """Greater than the specified value."""
  greaterThan: OrganizationMembershipsRolesEnum

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: OrganizationMembershipsRolesEnum

  """Included in the specified list."""
  in: [OrganizationMembershipsRolesEnum!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: OrganizationMembershipsRolesEnum

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: OrganizationMembershipsRolesEnum

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: OrganizationMembershipsRolesEnum

  """Not equal to the specified value."""
  notEqualTo: OrganizationMembershipsRolesEnum

  """Not included in the specified list."""
  notIn: [OrganizationMembershipsRolesEnum!]
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  createdAt: Datetime
  description: String
  id: UUID
  logoUrl: String
  name: String
  slug: String
  updatedAt: Datetime
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of `Organization` objects."""
  nodes: [Organization!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization!
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `Event` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationToManyEventFilter {
  """
  Every related `Event` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EventFilter

  """
  No related `Event` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EventFilter

  """
  Some related `Event` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EventFilter
}

"""
A filter to be used against many `OrganizationInvitation` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationToManyOrganizationInvitationFilter {
  """
  Every related `OrganizationInvitation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OrganizationInvitationFilter

  """
  No related `OrganizationInvitation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OrganizationInvitationFilter

  """
  Some related `OrganizationInvitation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OrganizationInvitationFilter
}

"""
A filter to be used against many `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationToManyOrganizationMembershipFilter {
  """
  Every related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OrganizationMembershipFilter

  """
  No related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OrganizationMembershipFilter

  """
  Some related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OrganizationMembershipFilter
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query {
  attendee(id: UUID!): Attendee
  attendeeByTicketNumber(ticketNumber: String!): Attendee
  attendeeFormField(id: UUID!): AttendeeFormField

  """Reads and enables pagination through a set of `AttendeeFormField`."""
  attendeeFormFields(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttendeeFormFieldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttendeeFormFieldFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AttendeeFormField`."""
    orderBy: [AttendeeFormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeeFormFieldsConnection

  """Reads and enables pagination through a set of `Attendee`."""
  attendees(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttendeeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttendeeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attendee`."""
    orderBy: [AttendeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeesConnection

  """Reads a set of `Attendee`."""
  attendeesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttendeeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttendeeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attendee`."""
    orderBy: [AttendeesOrderBy!]
  ): [Attendee!]

  """Handy method to get the current session ID."""
  currentSessionId: UUID

  """The currently logged in user (or null if not logged in)."""
  currentUser: User

  """
  Handy method to get the current user ID for use in RLS policies, etc; in GraphQL, use `currentUser{id}` instead.
  """
  currentUserId: UUID
  currentUserInvitedOrganizationIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UUIDFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserInvitedOrganizationIdsConnection
  currentUserMemberOrganizationIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UUIDFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserMemberOrganizationIdsConnection
  dateTruncFunc(date: Datetime!, unit: String!): Datetime
  event(id: UUID!): Event
  eventBranding(id: UUID!): EventBranding
  eventBrandingByEventId(eventId: UUID!): EventBranding

  """Reads and enables pagination through a set of `EventBranding`."""
  eventBrandings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventBrandingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventBrandingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EventBranding`."""
    orderBy: [EventBrandingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventBrandingsConnection
  eventByOrganizationIdAndName(name: String!, organizationId: UUID!): Event
  eventByOrganizationIdAndSlug(organizationId: UUID!, slug: String!): Event
  eventBySlug(eventSlug: String!, organizationSlug: String!): Event

  """Reads and enables pagination through a set of `Event`."""
  events(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsConnection
  formField(id: UUID!): FormField

  """Reads and enables pagination through a set of `FormField`."""
  formFields(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormFieldCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFieldFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormField`."""
    orderBy: [FormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormFieldsConnection
  log(id: UUID!): Log

  """Reads and enables pagination through a set of `Log`."""
  logs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LogFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Log`."""
    orderBy: [LogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogsConnection

  """Reads a set of `Log`."""
  logsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LogCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LogFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Log`."""
    orderBy: [LogsOrderBy!]
  ): [Log!]
  organization(id: UUID!): Organization
  organizationByName(name: String!): Organization
  organizationBySlug(slug: String!): Organization
  organizationForInvitation(code: String, invitationId: UUID!): Organization
  organizationInvitation(id: UUID!): OrganizationInvitation
  organizationInvitationByOrganizationIdAndEmail(email: String!, organizationId: UUID!): OrganizationInvitation
  organizationInvitationByOrganizationIdAndUserId(organizationId: UUID!, userId: UUID!): OrganizationInvitation

  """
  Reads and enables pagination through a set of `OrganizationInvitation`.
  """
  organizationInvitations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationInvitationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationInvitationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsConnection
  organizationMembership(id: UUID!): OrganizationMembership
  organizationMembershipByOrganizationIdAndUserId(organizationId: UUID!, userId: UUID!): OrganizationMembership

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """Reads a set of `Organization`."""
  organizationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]
  ): [Organization!]
  registration(id: UUID!): Registration

  """Reads and enables pagination through a set of `Registration`."""
  registrations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RegistrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RegistrationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsConnection
  user(id: UUID!): User
  userAuthentication(id: UUID!): UserAuthentication
  userAuthenticationByServiceAndIdentifier(identifier: String!, service: String!): UserAuthentication

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthentications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAuthenticationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsConnection
  userByUsername(username: String!): User

  """Reads and enables pagination through a set of `Event`."""
  userEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): EventsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

"""All input for the `registerAttendeesCsv` mutation."""
input RegisterAttendeesCsvInput {
  attendeesCsv: [AttendeePatch]!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventId: UUID!
  isForcing: Boolean!
}

"""The output of our `registerAttendeesCsv` mutation."""
type RegisterAttendeesCsvPayload {
  attendeeImports: [AttendeeImport]

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `registerAttendees` mutation."""
input RegisterAttendeesInput {
  attendees: [AttendeePatch]!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventId: UUID!
}

"""The output of our `registerAttendees` mutation."""
type RegisterAttendeesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `Registration`."""
  event: Event

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  registration: Registration

  """An edge for our `Registration`. May be used by Relay 1."""
  registrationEdge(
    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsEdge
}

"""All input for the `registerCompleteAttendeeCsv` mutation."""
input RegisterCompleteAttendeeCsvInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  completeAttendees: [CompleteAttendeeInput]!
  eventId: UUID!
  isForcing: Boolean
}

"""The output of our `registerCompleteAttendeeCsv` mutation."""
type RegisterCompleteAttendeeCsvPayload {
  attendeeImports: [AttendeeImport]

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `registerCompleteAttendees` mutation."""
input RegisterCompleteAttendeesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  completeAttendees: [CompleteAttendeeInput]!
  eventId: UUID!
}

"""The output of our `registerCompleteAttendees` mutation."""
type RegisterCompleteAttendeesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `Registration`."""
  event: Event

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  registration: Registration

  """An edge for our `Registration`. May be used by Relay 1."""
  registrationEdge(
    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsEdge
}

input RegisterInput {
  avatarUrl: String
  email: String!
  firstname: String!
  lastname: String!
  password: String!
  username: String
}

type RegisterPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Registration {
  """Reads and enables pagination through a set of `Attendee`."""
  attendees(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttendeeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttendeeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attendee`."""
    orderBy: [AttendeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeesConnection!

  """Reads and enables pagination through a set of `Attendee`."""
  attendeesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttendeeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttendeeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Attendee`."""
    orderBy: [AttendeesOrderBy!]
  ): [Attendee!]!
  createdAt: Datetime!

  """Reads a single `Event` that is related to this `Registration`."""
  event: Event
  eventId: UUID
  hearAboutList: [String]
  id: UUID!
  updatedAt: Datetime!
}

"""
A condition to be used against `Registration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RegistrationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `eventId` field."""
  eventId: UUID

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Registration` object types. All fields are combined with a logical ‘and.’
"""
input RegistrationFilter {
  """Checks for all expressions in this list."""
  and: [RegistrationFilter!]

  """Filter by the object’s `attendees` relation."""
  attendees: RegistrationToManyAttendeeFilter

  """Some related `attendees` exist."""
  attendeesExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `event` relation."""
  event: EventFilter

  """A related `event` exists."""
  eventExists: Boolean

  """Filter by the object’s `eventId` field."""
  eventId: UUIDFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: RegistrationFilter

  """Checks for any expressions in this list."""
  or: [RegistrationFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Registration`"""
input RegistrationInput {
  createdAt: Datetime
  eventId: UUID
  hearAboutList: [String]
  id: UUID
  updatedAt: Datetime
}

"""
Represents an update to a `Registration`. Fields that are set will be updated.
"""
input RegistrationPatch {
  createdAt: Datetime
  eventId: UUID
  hearAboutList: [String]
  id: UUID
  updatedAt: Datetime
}

"""A connection to a list of `Registration` values."""
type RegistrationsConnection {
  """
  A list of edges which contains the `Registration` and cursor to aid in pagination.
  """
  edges: [RegistrationsEdge!]!

  """A list of `Registration` objects."""
  nodes: [Registration!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Registration` you could get from the connection."""
  totalCount: Int!
}

"""A `Registration` edge in the connection."""
type RegistrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Registration` at the end of the edge."""
  node: Registration!
}

"""Methods to use when ordering `Registration`."""
enum RegistrationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_ID_ASC
  EVENT_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `Attendee` object types. All fields are combined with a logical ‘and.’
"""
input RegistrationToManyAttendeeFilter {
  """
  Every related `Attendee` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AttendeeFilter

  """
  No related `Attendee` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AttendeeFilter

  """
  Some related `Attendee` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AttendeeFilter
}

"""All input for the `removeFromOrganization` mutation."""
input RemoveFromOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `removeFromOrganization` mutation."""
type RemoveFromOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `requestAccountDeletion` mutation."""
input RequestAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `requestAccountDeletion` mutation."""
type RequestAccountDeletionPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resendEmailVerificationCode` mutation."""
input ResendEmailVerificationCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!
}

"""The output of our `resendEmailVerificationCode` mutation."""
type ResendEmailVerificationCodePayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  resetToken: String!
  userId: UUID!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

type RowEventAttendee {
  addressLine1: String
  details: String
  email: String
  endsAt: Datetime
  firstname: String
  headerMailContact: String
  headerMailName: String
  id: String
  lastname: String
  logo: String
  name: String
  pdfUrl: String
  placeName: String
  qrCodeUrl: String
  startsAt: Datetime
  ticketNumber: String
}

type RowEventAttendeeConfirm {
  email: String
  firstname: String
  id: String
  lastname: String
  name: String
  placeName: String
  status: String
}

"""All input for the `scanAttendee` mutation."""
input ScanAttendeeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  payload: TicketPayloadInput!
}

"""The output of our `scanAttendee` mutation."""
type ScanAttendeePayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `scanAttendeesAsync` mutation."""
input ScanAttendeesAsyncInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  payloads: [TicketPayloadInput]!
}

"""The output of our `scanAttendeesAsync` mutation."""
type ScanAttendeesAsyncPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `sendEmailAllAttendeeEvent` mutation."""
input SendEmailAllAttendeeEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventId: UUID!
}

"""The output of our `sendEmailAllAttendeeEvent` mutation."""
type SendEmailAllAttendeeEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  rowEventAttendees: [RowEventAttendee]
}

"""All input for the `sendEmailAttendeeEvent` mutation."""
input SendEmailAttendeeEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ticketNumber: String!
}

"""The output of our `sendEmailAttendeeEvent` mutation."""
type SendEmailAttendeeEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  rowEventAttendee: RowEventAttendee
}

"""All input for the `sendEmailConfirmDonationByEventId` mutation."""
input SendEmailConfirmDonationByEventIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventId: UUID!
}

"""The output of our `sendEmailConfirmDonationByEventId` mutation."""
type SendEmailConfirmDonationByEventIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  rowEventAttendeeConfirms: [RowEventAttendeeConfirm]
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Contained by the specified list of values."""
  containedBy: [String]

  """Contains the specified list of values."""
  contains: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value."""
  equalTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  """Triggered when the logged in user's record is updated in some way."""
  currentUserUpdated: UserSubscriptionPayload
}

"""An input for mutations affecting `TicketPayload`"""
input TicketPayloadInput {
  email: String
  metadata: JSON
  panelNumber: Int
  ticketNumber: String
}

"""All input for the `transferOrganizationOwnership` mutation."""
input TransferOrganizationOwnershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `transferOrganizationOwnership` mutation."""
type TransferOrganizationOwnershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type TypeErrorCodeAndMessage {
  data: JSON
  errorCode: String
  errorMessage: String
  errorValue: Int
}

"""All input for the `updateAttendeeEmailAndSendEmail` mutation."""
input UpdateAttendeeEmailAndSendEmailInput {
  attendees: [AttendeePatch]!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `updateAttendeeEmailAndSendEmail` mutation."""
type UpdateAttendeeEmailAndSendEmailPayload {
  attendees: [Attendee]

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateAttendeeFormField` mutation."""
input UpdateAttendeeFormFieldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `AttendeeFormField` being updated.
  """
  patch: AttendeeFormFieldPatch!
}

"""The output of our update `AttendeeFormField` mutation."""
type UpdateAttendeeFormFieldPayload {
  """Reads a single `Attendee` that is related to this `AttendeeFormField`."""
  attendee: Attendee

  """The `AttendeeFormField` that was updated by this mutation."""
  attendeeFormField: AttendeeFormField

  """An edge for our `AttendeeFormField`. May be used by Relay 1."""
  attendeeFormFieldEdge(
    """The method to use when ordering `AttendeeFormField`."""
    orderBy: [AttendeeFormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeeFormFieldsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FormField` that is related to this `AttendeeFormField`.
  """
  field: FormField

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateAttendee` mutation."""
input UpdateAttendeeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Attendee` being updated.
  """
  patch: AttendeePatch!
}

"""The output of our update `Attendee` mutation."""
type UpdateAttendeePayload {
  """The `Attendee` that was updated by this mutation."""
  attendee: Attendee

  """An edge for our `Attendee`. May be used by Relay 1."""
  attendeeEdge(
    """The method to use when ordering `Attendee`."""
    orderBy: [AttendeesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttendeesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Registration` that is related to this `Attendee`."""
  registration: Registration
}

"""All input for the `updateEventBranding` mutation."""
input UpdateEventBrandingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `EventBranding` being updated.
  """
  patch: EventBrandingPatch!
}

"""The output of our update `EventBranding` mutation."""
type UpdateEventBrandingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `EventBranding`."""
  event: Event

  """The `EventBranding` that was updated by this mutation."""
  eventBranding: EventBranding

  """An edge for our `EventBranding`. May be used by Relay 1."""
  eventBrandingEdge(
    """The method to use when ordering `EventBranding`."""
    orderBy: [EventBrandingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventBrandingsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEvent` mutation."""
input UpdateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Event` being updated.
  """
  patch: EventPatch!
}

"""The output of our update `Event` mutation."""
type UpdateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was updated by this mutation."""
  event: Event

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EventsEdge

  """Reads a single `Organization` that is related to this `Event`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFormField` mutation."""
input UpdateFormFieldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `FormField` being updated.
  """
  patch: FormFieldPatch!
}

"""The output of our update `FormField` mutation."""
type UpdateFormFieldPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `FormField`."""
  event: Event

  """The `FormField` that was updated by this mutation."""
  formField: FormField

  """An edge for our `FormField`. May be used by Relay 1."""
  formFieldEdge(
    """The method to use when ordering `FormField`."""
    orderBy: [FormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormFieldsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateLog` mutation."""
input UpdateLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Log` being updated.
  """
  patch: LogPatch!
}

"""The output of our update `Log` mutation."""
type UpdateLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `Log`."""
  event: Event

  """The `Log` that was updated by this mutation."""
  log: Log

  """An edge for our `Log`. May be used by Relay 1."""
  logEdge(
    """The method to use when ordering `Log`."""
    orderBy: [LogsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LogsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateOrganization` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""All input for the `updateOrganizationInvitation` mutation."""
input UpdateOrganizationInvitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `OrganizationInvitation` being updated.
  """
  patch: OrganizationInvitationPatch!
}

"""The output of our update `OrganizationInvitation` mutation."""
type UpdateOrganizationInvitationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organization` that is related to this `OrganizationInvitation`.
  """
  organization: Organization

  """The `OrganizationInvitation` that was updated by this mutation."""
  organizationInvitation: OrganizationInvitation

  """An edge for our `OrganizationInvitation`. May be used by Relay 1."""
  organizationInvitationEdge(
    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `OrganizationInvitation`.
  """
  user: User
}

"""All input for the `updateOrganizationMembership` mutation."""
input UpdateOrganizationMembershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `OrganizationMembership` being updated.
  """
  patch: OrganizationMembershipPatch!
}

"""The output of our update `OrganizationMembership` mutation."""
type UpdateOrganizationMembershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization

  """The `OrganizationMembership` that was updated by this mutation."""
  organizationMembership: OrganizationMembership

  """An edge for our `OrganizationMembership`. May be used by Relay 1."""
  organizationMembershipEdge(
    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateRegistration` mutation."""
input UpdateRegistrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Registration` being updated.
  """
  patch: RegistrationPatch!
}

"""The output of our update `Registration` mutation."""
type UpdateRegistrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Event` that is related to this `Registration`."""
  event: Event

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Registration` that was updated by this mutation."""
  registration: Registration

  """An edge for our `Registration`. May be used by Relay 1."""
  registrationEdge(
    """The method to use when ordering `Registration`."""
    orderBy: [RegistrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RegistrationsEdge
}

"""All input for the `updateUserAuthentication` mutation."""
input UpdateUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `UserAuthentication` being updated.
  """
  patch: UserAuthenticationPatch!
}

"""The output of our update `UserAuthentication` mutation."""
type UpdateUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was updated by this mutation."""
  userAuthentication: UserAuthentication

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A user who can log in to the application."""
type User {
  """Optional avatar URL."""
  avatarUrl: String
  createdAt: Datetime!
  email: String!

  """Reads and enables pagination through a set of `Event`."""
  events(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): EventsConnection!
  firstname: String!
  hasPassword: Boolean

  """Unique identifier for the user."""
  id: UUID!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  isOnboarded: Boolean!
  isVerified: Boolean!
  isVolunteer: Boolean!
  lastname: String!

  """
  Reads and enables pagination through a set of `OrganizationInvitation`.
  """
  organizationInvitations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationInvitationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationInvitationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationInvitation`."""
    orderBy: [OrganizationInvitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationInvitationsConnection!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection!
  organizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UsersOrganizationsRecordFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): UsersOrganizationsConnection!
  phoneNumber: String
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthentications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAuthenticationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsConnection!

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication {
  createdAt: Datetime!

  """Additional profile details extracted from this login method"""
  details: JSON!
  id: UUID!

  """A unique identifier for the user within the login service."""
  identifier: String!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserAuthentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserAuthenticationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `service` field."""
  service: String

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `UserAuthentication` object types. All fields are combined with a logical ‘and.’
"""
input UserAuthenticationFilter {
  """Checks for all expressions in this list."""
  and: [UserAuthenticationFilter!]

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: UserAuthenticationFilter

  """Checks for any expressions in this list."""
  or: [UserAuthenticationFilter!]

  """Filter by the object’s `service` field."""
  service: StringFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""An input for mutations affecting `UserAuthentication`"""
input UserAuthenticationInput {
  createdAt: Datetime

  """Additional profile details extracted from this login method"""
  details: JSON
  id: UUID

  """A unique identifier for the user within the login service."""
  identifier: String!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
  updatedAt: Datetime
  userId: UUID!
}

"""
Represents an update to a `UserAuthentication`. Fields that are set will be updated.
"""
input UserAuthenticationPatch {
  createdAt: Datetime

  """Additional profile details extracted from this login method"""
  details: JSON
  id: UUID

  """A unique identifier for the user within the login service."""
  identifier: String

  """The login service used, e.g. `twitter` or `github`."""
  service: String
  updatedAt: Datetime
  userId: UUID
}

"""A connection to a list of `UserAuthentication` values."""
type UserAuthenticationsConnection {
  """
  A list of edges which contains the `UserAuthentication` and cursor to aid in pagination.
  """
  edges: [UserAuthenticationsEdge!]!

  """A list of `UserAuthentication` objects."""
  nodes: [UserAuthentication!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserAuthentication` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UserAuthentication` edge in the connection."""
type UserAuthenticationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserAuthentication` at the end of the edge."""
  node: UserAuthentication!
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ASC
  SERVICE_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isVolunteer` field."""
  isVolunteer: Boolean

  """Checks for equality with the object’s `lastname` field."""
  lastname: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `hasPassword` field."""
  hasPassword: BooleanFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isVolunteer` field."""
  isVolunteer: BooleanFilter

  """Filter by the object’s `lastname` field."""
  lastname: StringFilter

  """Negates the expression."""
  not: UserFilter

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Filter by the object’s `organizationInvitations` relation."""
  organizationInvitations: UserToManyOrganizationInvitationFilter

  """Some related `organizationInvitations` exist."""
  organizationInvitationsExist: Boolean

  """Filter by the object’s `organizationMemberships` relation."""
  organizationMemberships: UserToManyOrganizationMembershipFilter

  """Some related `organizationMemberships` exist."""
  organizationMembershipsExist: Boolean

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `userAuthentications` relation."""
  userAuthentications: UserToManyUserAuthenticationFilter

  """Some related `userAuthentications` exist."""
  userAuthenticationsExist: Boolean

  """Filter by the object’s `username` field."""
  username: StringFilter
}

"""An input for mutations affecting `User`"""
input UserInput {
  """Optional avatar URL."""
  avatarUrl: String
  createdAt: Datetime
  email: String!
  firstname: String!

  """Unique identifier for the user."""
  id: UUID

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  isOnboarded: Boolean
  isVerified: Boolean
  isVolunteer: Boolean
  lastname: String!
  phoneNumber: String
  updatedAt: Datetime

  """Public-facing username (or 'handle') of the user."""
  username: String
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Optional avatar URL."""
  avatarUrl: String
  createdAt: Datetime
  email: String
  firstname: String

  """Unique identifier for the user."""
  id: UUID

  """If true, the user has elevated privileges."""
  isAdmin: Boolean
  isOnboarded: Boolean
  isVerified: Boolean
  isVolunteer: Boolean
  lastname: String
  phoneNumber: String
  updatedAt: Datetime

  """Public-facing username (or 'handle') of the user."""
  username: String
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  IS_VOLUNTEER_ASC
  IS_VOLUNTEER_DESC
  LASTNAME_ASC
  LASTNAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
}

"""A `UsersOrganizationsRecord` edge in the connection."""
type UsersOrganizationEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UsersOrganizationsRecord` at the end of the edge."""
  node: UsersOrganizationsRecord!
}

"""A connection to a list of `UsersOrganizationsRecord` values."""
type UsersOrganizationsConnection {
  """
  A list of edges which contains the `UsersOrganizationsRecord` and cursor to aid in pagination.
  """
  edges: [UsersOrganizationEdge!]!

  """A list of `UsersOrganizationsRecord` objects."""
  nodes: [UsersOrganizationsRecord!]!

  """
  The count of *all* `UsersOrganizationsRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""The return type of our `organizations` query."""
type UsersOrganizationsRecord {
  organization: Organization
  role: String
}

"""
A filter to be used against `UsersOrganizationsRecord` object types. All fields are combined with a logical ‘and.’
"""
input UsersOrganizationsRecordFilter {
  """Checks for all expressions in this list."""
  and: [UsersOrganizationsRecordFilter!]

  """Negates the expression."""
  not: UsersOrganizationsRecordFilter

  """Checks for any expressions in this list."""
  or: [UsersOrganizationsRecordFilter!]

  """Filter by the object’s `role` field."""
  role: StringFilter
}

type UserSubscriptionPayload {
  event: String
  user: User
}

"""
A filter to be used against many `OrganizationInvitation` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyOrganizationInvitationFilter {
  """
  Every related `OrganizationInvitation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OrganizationInvitationFilter

  """
  No related `OrganizationInvitation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OrganizationInvitationFilter

  """
  Some related `OrganizationInvitation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OrganizationInvitationFilter
}

"""
A filter to be used against many `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyOrganizationMembershipFilter {
  """
  Every related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OrganizationMembershipFilter

  """
  No related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OrganizationMembershipFilter

  """
  Some related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OrganizationMembershipFilter
}

"""
A filter to be used against many `UserAuthentication` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserAuthenticationFilter {
  """
  Every related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserAuthenticationFilter

  """
  No related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserAuthenticationFilter

  """
  Some related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserAuthenticationFilter
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
  userId: UUID!
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
